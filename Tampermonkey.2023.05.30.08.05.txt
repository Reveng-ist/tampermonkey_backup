{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"gimkitcheat","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.gimkit.com/join*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685021797980,"data":{"cssVars":"s{\"menu-bg-color\":\"rgba(0, 0, 0, 1)\",\"menu-border-color\":\"rgba(0, 255, 30, 1)\",\"text-color\":\"rgba(255, 255, 255, 1)\",\"button-bg-color\":\"rgba(0, 0, 0, 1)\",\"button-border-color\":\"rgba(0, 255, 30, 1)\",\"menu-controls-bg-color\":\"rgba(0, 0, 0, 1)\",\"menu-controls-text-color\":\"rgba(0, 255, 30, 1)\",\"textinput-border-color\":\"rgba(0, 255, 30, 1)\",\"textinput-bg-color\":\"rgba(0, 0, 0, 1)\",\"toggle-bg-color\":\"rgba(0, 0, 0, 1)\",\"toggle-border-color\":\"rgba(0, 255, 30, 1)\",\"dropdown-bg-color\":\"rgba(0, 0, 0, 1)\",\"dropdown-border-color\":\"rgba(0, 255, 30, 1)\",\"keybind-editor-bg-color\":\"rgba(0, 0, 0, 1)\",\"keybind-editor-border-color\":\"rgba(0, 255, 30, 1)\"}","menuTransforms":"s{\"HUD Customization\":{\"top\":10,\"left\":10,\"width\":341.5,\"height\":332.5,\"minimized\":true},\"Devtools\":{\"top\":342.5,\"left\":10,\"width\":341.5,\"height\":332.5,\"minimized\":true},\"General Cheats\":{\"top\":10,\"left\":475.3333333333333,\"width\":341.5,\"height\":332.5,\"minimized\":true},\"Cheats for gamemodes\":{\"top\":346,\"left\":475,\"width\":341.5,\"height\":332.5,\"minimized\":true}}"}},"enabled":true,"position":1,"file_url":"https://raw.githubusercontent.com/TheLazySquid/GimkitCheat/main/build/bundle.user.js","uuid":"66d6a07c-3d77-4b4d-9583-e9be7a1f8c2b","source":""},{"name":"YouTube Auto-Liker","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["http://*.youtube.com/*","https://*.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685019476884,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/33865-youtube-auto-liker/code/YouTube%20Auto-Liker.user.js","uuid":"4bb01f84-d672-48bd-9994-257d95a1f18e","source":"","requires":[{"meta":{"name":"GM_config.js","url":"https://openuserjs.org/src/libs/sizzle/GM_config.js","ts":1685019477510,"mimetype":"text/javascript"},"source":""}]},{"name":"Sleek YouTube Downloader","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.youtube.com/","https://www.youtube.com/watch*","https://www.youtube.com/playlist*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685019502075,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/438233-sleek-youtube-downloader/code/Sleek%20YouTube%20Downloader.user.js","uuid":"1f87d83e-305a-46a4-99c1-a15ce8e98df1","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTbGVlayBZb3VUdWJlIERvd25sb2FkZXIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vdGhpc2lzbXktZ2l0aHViCi8vIEBkZXNjcmlwdGlvbiAgQSBzaW1wbGUgdG9vbCB0aGF0IGFkZHMgWW91VHViZS1zdHlsZSBidXR0b25zIGZvciBtdWx0aS1mb3JtYXQgZG93bmxvYWRpbmcuIExpZ2h0ZXIgdGhhbiBtb3N0IGRvd25sb2FkIHNjcmlwdHMuCi8vIEBhdXRob3IgICAgICAgdGhpc2lzbXktZ2l0aHViCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cueW91dHViZS5jb20vCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2gqCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3QqCi8vIEBncmFudCAgICAgICAgbm9uZQovLyBAbGljZW5zZSAgICAgIE1JVAovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LWVuZAovLyBAdmVyc2lvbiAgICAgIDMuMi4wCi8vID09L1VzZXJTY3JpcHQ9PQoKCi8vIFZhbGlkIGZvcm1hdHM6IE1QNCB8fCBNUDMsIFdBViwgTTRBLCBXRUJNLCBBQUMsIEZMQUMsIE9QVVMsIE9HRwpjb25zdCBidXR0b25zID0gWyJNUDMiLCAiTVA0Il07CgoKLy8gVGhlcmUgaXMgbm8gY29uc2lzdGVudCB2YXJpYWJsZSBmb3IgYm9yZGVyLXJhZGl1cyAoYnV0dG9uIHJvdW5kbmVzcykgeWV0LgovLyBPbGQgYm9yZGVyLXJhZGl1czogMnB4LiBOZXcgYm9yZGVyLXJhZGl1czogMjBweCBvciBoaWdoZXIuCmNvbnN0IGNzc1RleHQgPSBgCiAgICAuZG93bmxvYWQtYnV0dG9uIHsKICAgICAgICBib3JkZXItcmFkaXVzOiAyMHB4OwogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0teXQtc3BlYy0xMC1wZXJjZW50LWxheWVyKTsKICAgICAgICBjb2xvcjogdmFyKC0teXQtc3BlYy10ZXh0LXNlY29uZGFyeSk7CiAgICAgICAgcGFkZGluZzogdmFyKC0teXQtYnV0dG9uLXBhZGRpbmcpOwogICAgICAgIG1hcmdpbjogYXV0byB2YXIoLS15dGQtc3Vic2NyaWJlLWJ1dHRvbi1tYXJnaW4sIDRweCk7CiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgICAgICBmb250LXNpemU6IHZhcigtLXl0ZC10YWItc3lzdGVtLWZvbnQtc2l6ZSwgMS40cmVtKTsKICAgICAgICBmb250LXdlaWdodDogdmFyKC0teXRkLXRhYi1zeXN0ZW0tZm9udC13ZWlnaHQsIDUwMCk7CiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IHZhcigtLXl0ZC10YWItc3lzdGVtLWxldHRlci1zcGFjaW5nLCAuMDA3cHgpOwogICAgICAgIHRleHQtdHJhbnNmb3JtOiB2YXIoLS15dGQtdGFiLXN5c3RlbS10ZXh0LXRyYW5zZm9ybSwgdXBwZXJjYXNlKTsKICAgIH0KICAgIC5kb3dubG9hZC1idXR0b24tdGV4dCB7CiAgICAgICAgLS15dC1mb3JtYXR0ZWQtc3RyaW5nLWRlZW1waGFzaXplXy1fZGlzcGxheTogaW5pdGlhbDsKICAgICAgICAtLXl0LWZvcm1hdHRlZC1zdHJpbmctZGVlbXBoYXNpemUtY29sb3I6IHZhcigtLXl0LXNwZWMtdGV4dC1zZWNvbmRhcnkpOwogICAgICAgIC0teXQtZm9ybWF0dGVkLXN0cmluZy1kZWVtcGhhc2l6ZV8tX21hcmdpbi1sZWZ0OiA0cHg7CiAgICB9CiAgICAuZG93bmxvYWQtYnV0dG9uLWNvbnRhaW5lciB7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgfQogICAgLmRvd25sb2FkLXBsYXlsaXN0LWJ1dHRvbiB7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDsKICAgIH0KICAgIC5kb3dubG9hZC1wbGF5bGlzdC1idXR0b24tdGV4dCB7CiAgICAgICAgY29sb3I6ICNFNEU0RTQ7CiAgICB9CmA7CgoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgd2luZG93Lm9ubG9hZCA9ICgpID0+IHsKCiAgICAgICAgLy8gcGxheWxpc3QgcGFnZXMgd2lsbCB0cnkgdG8gYWRkIHRoZSBidXR0b25zIHJlcGVhdGVkbHkKICAgICAgICBsZXQgcGxheWxpc3RCdXR0b25zQWRkZWQgPSBmYWxzZTsKCiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInl0LW5hdmlnYXRlLWZpbmlzaCIsICgpID0+IHsKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CgogICAgICAgICAgICAgICAgLy8gYXBwbHkgY3NzCiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CiAgICAgICAgICAgICAgICBzdHlsZS50eXBlID0gInRleHQvY3NzIjsKICAgICAgICAgICAgICAgIHN0eWxlLmlubmVySFRNTCA9IGNzc1RleHQ7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsKCiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgcGxheWxpc3QgYW5kIGNyZWF0ZSBhcHByb3ByaWF0ZSBxdWVyeQogICAgICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gIiNhbmFseXRpY3MtYnV0dG9uOm5vdCguZG93bmxvYWQtcGFuZWwpIjsKICAgICAgICAgICAgICAgIGxldCBpblBsYXlsaXN0ID0gbG9jYXRpb24uaHJlZi5pbmNsdWRlcygiL3BsYXlsaXN0Iik7CiAgICAgICAgICAgICAgICBpZiAoaW5QbGF5bGlzdCAmJiAhcGxheWxpc3RCdXR0b25zQWRkZWQpIHsKICAgICAgICAgICAgICAgICAgICBxdWVyeSArPSAiLCBkaXYubWV0YWRhdGEtYnV0dG9ucy13cmFwcGVyOm5vdCguZG93bmxvYWQtcGFuZWwpIjsKICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdEJ1dHRvbnNBZGRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSkuZm9yRWFjaChwYW5lbCA9PiB7CgogICAgICAgICAgICAgICAgICAgIC8vIG91dGVyIGNvbnRhaW5lciAodG8gZmxleCBidXR0b25zIHNpZGUtYnktc2lkZSkKICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgiZG93bmxvYWQtYnV0dG9uLWNvbnRhaW5lciIpOwoKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1dHRvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7ICAgICAgICAvLyBidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoImRvd25sb2FkLWJ1dHRvbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5QbGF5bGlzdCkgeyBidXR0b24uY2xhc3NMaXN0LmFkZCgiZG93bmxvYWQtcGxheWxpc3QtYnV0dG9uIik7IH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsgICAgICAgICAgICAgLy8gZG93bmxvYWQgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5rID0gZW5jb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhyZWYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvcm1hdCA9IGJ1dHRvbnNbaV0udG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICJtcDQiKSB7IGZvcm1hdCA9ICI3IjsgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oYGh0dHBzOi8vbG9hZGVyLnRvLz9saW5rPSR7IGxpbmsgfSZmPSR7IGZvcm1hdCB9JnM9MSZlPTEmcj1sb2FkZXJgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidXR0b25UZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOyAgIC8vIGJ1dHRvbiB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblRleHQuY2xhc3NMaXN0LmFkZCgiZG93bmxvYWQtYnV0dG9uLXRleHQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluUGxheWxpc3QpIHsgYnV0dG9uVGV4dC5jbGFzc0xpc3QuYWRkKCJkb3dubG9hZC1wbGF5bGlzdC1idXR0b24tdGV4dCIpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblRleHQuaW5uZXJIVE1MID0gYnV0dG9uc1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmFwcGVuZENoaWxkKGJ1dHRvblRleHQpOyAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgdGV4dCB0byBidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCJkb3dubG9hZC1wYW5lbCIpOwogICAgICAgICAgICAgICAgICAgIHBhbmVsLmluc2VydEJlZm9yZShjb250YWluZXIsIHBhbmVsLmZpcnN0RWxlbWVudENoaWxkKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LCAyMDApOwogICAgICAgIH0pOwogICAgfTsKfSkoKTs="},{"name":"[Pixlr] Remove Black Sidebar","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://pixlr.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685019751319,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/430910-pixlr-remove-black-sidebar/code/%5BPixlr%5D%20Remove%20Black%20Sidebar.user.js","uuid":"db0afe60-f90f-4e1f-b884-54fe57199d08","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFtQaXhscl0gUmVtb3ZlIEJsYWNrIFNpZGViYXIKLy8gQG5hbWVzcGFjZSAgIEhLUgovLyBAbWF0Y2ggICAgICAgaHR0cHM6Ly9waXhsci5jb20vKgovLyBAZ3JhbnQgICAgICAgbm9uZQovLyBAdmVyc2lvbiAgICAgMS4xCi8vIEBhdXRob3IgICAgICBIS1IKLy8gQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIGFubm95aW5nIGJsYWNrIHNpZGViYXIgdGhhdCBBZGJsb2NrZXJzIGRpZG4ndCByZW1vdmUuCi8vIEByZXF1aXJlICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3NjcmlwdHMvMjE5MjctYXJyaXZlLWpzL2NvZGUvYXJyaXZlanMuanMKLy8gQHN1cHBvcnRVUkwgIGh0dHBzOi8vZ2l0aHViLmNvbS9IYWtvcnIvVXNlcnNjcmlwdHMvaXNzdWVzCi8vIEBncmFudCAgICAgICBHTV9hZGRTdHlsZQovLyA9PS9Vc2VyU2NyaXB0PT0KCigoKSA9PiB7CkdNX2FkZFN0eWxlKCIjd29ya3NwYWNlIHsgcmlnaHQ6IDBweCAhaW1wb3J0YW50OyB9Iik7Cgpkb2N1bWVudC5hcnJpdmUoJyNzbG90JywgZnVuY3Rpb24gKCkgewogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Nsb3QnKS5yZW1vdmUoKTsKICAgIGNvbnNvbGUubG9nKCJbUmVtb3ZlIEJsYWNrIFNpZGVyYmFyXSBSZW1vdmVkIGFuIGVsZW1lbnQhIikKfSk7Cgpkb2N1bWVudC5hcnJpdmUoJyNyaWdodC1zcGFjZScsIGZ1bmN0aW9uICgpIHsKICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyaWdodC1zcGFjZScpLnJlbW92ZSgpOwogICAgY29uc29sZS5sb2coIltSZW1vdmUgQmxhY2sgU2lkZXJiYXJdIFJlbW92ZWQgYW4gZWxlbWVudCEiKQp9KTsKfSkoKTsK","requires":[{"meta":{"name":"arrivejs.js","url":"https://greasyfork.org/scripts/21927-arrive-js/code/arrivejs.js","ts":1685019751658,"mimetype":"text/javascript"},"source":"LypnbG9iYWxzIGpRdWVyeSxXaW5kb3csSFRNTEVsZW1lbnQsSFRNTERvY3VtZW50LEhUTUxDb2xsZWN0aW9uLE5vZGVMaXN0LE11dGF0aW9uT2JzZXJ2ZXIgKi8KLypleHBvcnRlZCBBcnJpdmUqLwovKmpzaGludCBsYXRlZGVmOmZhbHNlICovCgovKgogKiBhcnJpdmUuanMKICogdjIuNC4xCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS91emFpcmZhcm9vcS9hcnJpdmUKICogTUlUIGxpY2Vuc2VkCiAqCiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3IFV6YWlyIEZhcm9vcQogKi8KdmFyIEFycml2ZSA9IChmdW5jdGlvbih3aW5kb3csICQsIHVuZGVmaW5lZCkgewoKICAidXNlIHN0cmljdCI7CgogIGlmKCF3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICd1bmRlZmluZWQnKXsKICAgIHJldHVybjsgLy9mb3IgdW5zdXBwb3J0ZWQgYnJvd3NlcnMKICB9CgogIHZhciBhcnJpdmVVbmlxdWVJZCA9IDA7CgogIHZhciB1dGlscyA9IChmdW5jdGlvbigpIHsKICAgIHZhciBtYXRjaGVzID0gSFRNTEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHwgSFRNTEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBIVE1MRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yCiAgICAgICAgICAgICAgICAgIHx8IEhUTUxFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvcjsKCiAgICByZXR1cm4gewogICAgICBtYXRjaGVzU2VsZWN0b3I6IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBtYXRjaGVzLmNhbGwoZWxlbSwgc2VsZWN0b3IpOwogICAgICB9LAogICAgICAvLyB0byBlbmFibGUgZnVuY3Rpb24gb3ZlcmxvYWRpbmcgLSBCeSBKb2huIFJlc2lnIChNSVQgTGljZW5zZWQpCiAgICAgIGFkZE1ldGhvZDogZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgZm4pIHsKICAgICAgICB2YXIgb2xkID0gb2JqZWN0WyBuYW1lIF07CiAgICAgICAgb2JqZWN0WyBuYW1lIF0gPSBmdW5jdGlvbigpewogICAgICAgICAgaWYgKCBmbi5sZW5ndGggPT0gYXJndW1lbnRzLmxlbmd0aCApIHsKICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKCB0eXBlb2Ygb2xkID09ICdmdW5jdGlvbicgKSB7CiAgICAgICAgICAgIHJldHVybiBvbGQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0sCiAgICAgIGNhbGxDYWxsYmFja3M6IGZ1bmN0aW9uKGNhbGxiYWNrc1RvQmVDYWxsZWQsIHJlZ2lzdHJhdGlvbkRhdGEpIHsKICAgICAgICBpZiAocmVnaXN0cmF0aW9uRGF0YSAmJiByZWdpc3RyYXRpb25EYXRhLm9wdGlvbnMub25jZU9ubHkgJiYgcmVnaXN0cmF0aW9uRGF0YS5maXJlZEVsZW1zLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAvLyBhcyBvbmx5T25jZSBwYXJhbSBpcyB0cnVlLCBtYWtlIHN1cmUgd2UgZmlyZSB0aGUgZXZlbnQgZm9yIG9ubHkgb25lIGl0ZW0KICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQgPSBbY2FsbGJhY2tzVG9CZUNhbGxlZFswXV07CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBpID0gMCwgY2I7IChjYiA9IGNhbGxiYWNrc1RvQmVDYWxsZWRbaV0pOyBpKyspIHsKICAgICAgICAgIGlmIChjYiAmJiBjYi5jYWxsYmFjaykgewogICAgICAgICAgICBjYi5jYWxsYmFjay5jYWxsKGNiLmVsZW0sIGNiLmVsZW0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbkRhdGEgJiYgcmVnaXN0cmF0aW9uRGF0YS5vcHRpb25zLm9uY2VPbmx5ICYmIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5sZW5ndGggPT0gMSkgewogICAgICAgICAgLy8gdW5iaW5kIGV2ZW50IGFmdGVyIGZpcnN0IGNhbGxiYWNrIGFzIG9uY2VPbmx5IGlzIHRydWUuCiAgICAgICAgICByZWdpc3RyYXRpb25EYXRhLm1lLnVuYmluZEV2ZW50V2l0aFNlbGVjdG9yQW5kQ2FsbGJhY2suY2FsbCgKICAgICAgICAgICAgcmVnaXN0cmF0aW9uRGF0YS50YXJnZXQsIHJlZ2lzdHJhdGlvbkRhdGEuc2VsZWN0b3IsIHJlZ2lzdHJhdGlvbkRhdGEuY2FsbGJhY2spOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gdHJhdmVyc2UgdGhyb3VnaCBhbGwgZGVzY2VuZGFudHMgb2YgYSBub2RlIHRvIGNoZWNrIGlmIGV2ZW50IHNob3VsZCBiZSBmaXJlZCBmb3IgYW55IGRlc2NlbmRhbnQKICAgICAgY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHk6IGZ1bmN0aW9uKG5vZGVzLCByZWdpc3RyYXRpb25EYXRhLCBtYXRjaEZ1bmMsIGNhbGxiYWNrc1RvQmVDYWxsZWQpIHsKICAgICAgICAvLyBjaGVjayBlYWNoIG5ldyBub2RlIGlmIGl0IG1hdGNoZXMgdGhlIHNlbGVjdG9yCiAgICAgICAgZm9yICh2YXIgaT0wLCBub2RlOyAobm9kZSA9IG5vZGVzW2ldKTsgaSsrKSB7CiAgICAgICAgICBpZiAobWF0Y2hGdW5jKG5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEsIGNhbGxiYWNrc1RvQmVDYWxsZWQpKSB7CiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQucHVzaCh7IGNhbGxiYWNrOiByZWdpc3RyYXRpb25EYXRhLmNhbGxiYWNrLCBlbGVtOiBub2RlIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICB1dGlscy5jaGVja0NoaWxkTm9kZXNSZWN1cnNpdmVseShub2RlLmNoaWxkTm9kZXMsIHJlZ2lzdHJhdGlvbkRhdGEsIG1hdGNoRnVuYywgY2FsbGJhY2tzVG9CZUNhbGxlZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBtZXJnZUFycmF5czogZnVuY3Rpb24oZmlyc3RBcnIsIHNlY29uZEFycil7CiAgICAgICAgLy8gT3ZlcndyaXRlcyBkZWZhdWx0IG9wdGlvbnMgd2l0aCB1c2VyLWRlZmluZWQgb3B0aW9ucy4KICAgICAgICB2YXIgb3B0aW9ucyA9IHt9LAogICAgICAgICAgICBhdHRyTmFtZTsKICAgICAgICBmb3IgKGF0dHJOYW1lIGluIGZpcnN0QXJyKSB7CiAgICAgICAgICBpZiAoZmlyc3RBcnIuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7CiAgICAgICAgICAgIG9wdGlvbnNbYXR0ck5hbWVdID0gZmlyc3RBcnJbYXR0ck5hbWVdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGF0dHJOYW1lIGluIHNlY29uZEFycikgewogICAgICAgICAgaWYgKHNlY29uZEFyci5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHsKICAgICAgICAgICAgb3B0aW9uc1thdHRyTmFtZV0gPSBzZWNvbmRBcnJbYXR0ck5hbWVdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gb3B0aW9uczsKICAgICAgfSwKICAgICAgdG9FbGVtZW50c0FycmF5OiBmdW5jdGlvbiAoZWxlbWVudHMpIHsKICAgICAgICAvLyBjaGVjayBpZiBvYmplY3QgaXMgYW4gYXJyYXkgKG9yIGFycmF5IGxpa2Ugb2JqZWN0KQogICAgICAgIC8vIE5vdGU6IHdpbmRvdyBvYmplY3QgaGFzIC5sZW5ndGggcHJvcGVydHkgYnV0IGl0J3Mgbm90IGFycmF5IG9mIGVsZW1lbnRzIHNvIGRvbid0IGNvbnNpZGVyIGl0IGFuIGFycmF5CiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50cyAhPT0gInVuZGVmaW5lZCIgJiYgKHR5cGVvZiBlbGVtZW50cy5sZW5ndGggIT09ICJudW1iZXIiIHx8IGVsZW1lbnRzID09PSB3aW5kb3cpKSB7CiAgICAgICAgICBlbGVtZW50cyA9IFtlbGVtZW50c107CiAgICAgICAgfQogICAgICAgIHJldHVybiBlbGVtZW50czsKICAgICAgfQogICAgfTsKICB9KSgpOwoKCiAgLy8gQ2xhc3MgdG8gbWFpbnRhaW4gc3RhdGUgb2YgYWxsIHJlZ2lzdGVyZWQgZXZlbnRzIG9mIGEgc2luZ2xlIHR5cGUKICB2YXIgRXZlbnRzQnVja2V0ID0gKGZ1bmN0aW9uKCkgewogICAgdmFyIEV2ZW50c0J1Y2tldCA9IGZ1bmN0aW9uKCkgewogICAgICAvLyBob2xkcyBhbGwgdGhlIGV2ZW50cwoKICAgICAgdGhpcy5fZXZlbnRzQnVja2V0ICAgID0gW107CiAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGlsZSBhZGRpbmcgYW4gZXZlbnQsIHRoZSBmdW5jdGlvbiBzaG91bGQgZG8gdGhlIGV2ZW50IGluaXRpYWxpemF0aW9uL3JlZ2lzdHJhdGlvbgogICAgICB0aGlzLl9iZWZvcmVBZGRpbmcgICAgPSBudWxsOwogICAgICAvLyBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hpbGUgcmVtb3ZpbmcgYW4gZXZlbnQsIHRoZSBmdW5jdGlvbiBzaG91bGQgZG8gdGhlIGV2ZW50IGRlc3RydWN0aW9uCiAgICAgIHRoaXMuX2JlZm9yZVJlbW92aW5nICA9IG51bGw7CiAgICB9OwoKICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbih0YXJnZXQsIHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykgewogICAgICB2YXIgbmV3RXZlbnQgPSB7CiAgICAgICAgdGFyZ2V0OiAgICAgICAgICAgICB0YXJnZXQsCiAgICAgICAgc2VsZWN0b3I6ICAgICAgICAgICBzZWxlY3RvciwKICAgICAgICBvcHRpb25zOiAgICAgICAgICAgIG9wdGlvbnMsCiAgICAgICAgY2FsbGJhY2s6ICAgICAgICAgICBjYWxsYmFjaywKICAgICAgICBmaXJlZEVsZW1zOiAgICAgICAgIFtdCiAgICAgIH07CgogICAgICBpZiAodGhpcy5fYmVmb3JlQWRkaW5nKSB7CiAgICAgICAgdGhpcy5fYmVmb3JlQWRkaW5nKG5ld0V2ZW50KTsKICAgICAgfQoKICAgICAgdGhpcy5fZXZlbnRzQnVja2V0LnB1c2gobmV3RXZlbnQpOwogICAgICByZXR1cm4gbmV3RXZlbnQ7CiAgICB9OwoKICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbihjb21wYXJlRnVuY3Rpb24pIHsKICAgICAgZm9yICh2YXIgaT10aGlzLl9ldmVudHNCdWNrZXQubGVuZ3RoIC0gMSwgcmVnaXN0ZXJlZEV2ZW50OyAocmVnaXN0ZXJlZEV2ZW50ID0gdGhpcy5fZXZlbnRzQnVja2V0W2ldKTsgaS0tKSB7CiAgICAgICAgaWYgKGNvbXBhcmVGdW5jdGlvbihyZWdpc3RlcmVkRXZlbnQpKSB7CiAgICAgICAgICBpZiAodGhpcy5fYmVmb3JlUmVtb3ZpbmcpIHsKICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVSZW1vdmluZyhyZWdpc3RlcmVkRXZlbnQpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIG1hcmsgY2FsbGJhY2sgYXMgbnVsbCBzbyB0aGF0IGV2ZW4gaWYgYW4gZXZlbnQgbXV0YXRpb24gd2FzIGFscmVhZHkgdHJpZ2dlcmVkIGl0IGRvZXMgbm90IGNhbGwgY2FsbGJhY2sKICAgICAgICAgIHZhciByZW1vdmVkRXZlbnRzID0gdGhpcy5fZXZlbnRzQnVja2V0LnNwbGljZShpLCAxKTsKICAgICAgICAgIGlmIChyZW1vdmVkRXZlbnRzICYmIHJlbW92ZWRFdmVudHMubGVuZ3RoKSB7CiAgICAgICAgICAgIHJlbW92ZWRFdmVudHNbMF0uY2FsbGJhY2sgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBFdmVudHNCdWNrZXQucHJvdG90eXBlLmJlZm9yZUFkZGluZyA9IGZ1bmN0aW9uKGJlZm9yZUFkZGluZykgewogICAgICB0aGlzLl9iZWZvcmVBZGRpbmcgPSBiZWZvcmVBZGRpbmc7CiAgICB9OwoKICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUuYmVmb3JlUmVtb3ZpbmcgPSBmdW5jdGlvbihiZWZvcmVSZW1vdmluZykgewogICAgICB0aGlzLl9iZWZvcmVSZW1vdmluZyA9IGJlZm9yZVJlbW92aW5nOwogICAgfTsKCiAgICByZXR1cm4gRXZlbnRzQnVja2V0OwogIH0pKCk7CgoKICAvKioKICAgKiBAY29uc3RydWN0b3IKICAgKiBHZW5lcmFsIGNsYXNzIGZvciBiaW5kaW5nL3VuYmluZGluZyBhcnJpdmUgYW5kIGxlYXZlIGV2ZW50cwogICAqLwogIHZhciBNdXRhdGlvbkV2ZW50cyA9IGZ1bmN0aW9uKGdldE9ic2VydmVyQ29uZmlnLCBvbk11dGF0aW9uKSB7CiAgICB2YXIgZXZlbnRzQnVja2V0ICAgID0gbmV3IEV2ZW50c0J1Y2tldCgpLAogICAgICAgIG1lICAgICAgICAgICAgICA9IHRoaXM7CgogICAgdmFyIGRlZmF1bHRPcHRpb25zID0gewogICAgICBmaXJlT25BdHRyaWJ1dGVzTW9kaWZpY2F0aW9uOiBmYWxzZQogICAgfTsKCiAgICAvLyBhY3R1YWwgZXZlbnQgcmVnaXN0cmF0aW9uIGJlZm9yZSBhZGRpbmcgaXQgdG8gYnVja2V0CiAgICBldmVudHNCdWNrZXQuYmVmb3JlQWRkaW5nKGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbkRhdGEpIHsKICAgICAgdmFyCiAgICAgICAgdGFyZ2V0ICAgID0gcmVnaXN0cmF0aW9uRGF0YS50YXJnZXQsCiAgICAgICAgb2JzZXJ2ZXI7CgogICAgICAvLyBtdXRhdGlvbiBvYnNlcnZlciBkb2VzIG5vdCB3b3JrIG9uIHdpbmRvdyBvciBkb2N1bWVudAogICAgICBpZiAodGFyZ2V0ID09PSB3aW5kb3cuZG9jdW1lbnQgfHwgdGFyZ2V0ID09PSB3aW5kb3cpIHsKICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaHRtbCIpWzBdOwogICAgICB9CgogICAgICAvLyBDcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UKICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihlKSB7CiAgICAgICAgb25NdXRhdGlvbi5jYWxsKHRoaXMsIGUsIHJlZ2lzdHJhdGlvbkRhdGEpOwogICAgICB9KTsKCiAgICAgIHZhciBjb25maWcgPSBnZXRPYnNlcnZlckNvbmZpZyhyZWdpc3RyYXRpb25EYXRhLm9wdGlvbnMpOwoKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIGNvbmZpZyk7CgogICAgICByZWdpc3RyYXRpb25EYXRhLm9ic2VydmVyID0gb2JzZXJ2ZXI7CiAgICAgIHJlZ2lzdHJhdGlvbkRhdGEubWUgPSBtZTsKICAgIH0pOwoKICAgIC8vIGNsZWFudXAvdW5yZWdpc3RlciBiZWZvcmUgcmVtb3ZpbmcgYW4gZXZlbnQKICAgIGV2ZW50c0J1Y2tldC5iZWZvcmVSZW1vdmluZyhmdW5jdGlvbiAoZXZlbnREYXRhKSB7CiAgICAgIGV2ZW50RGF0YS5vYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICB9KTsKCiAgICB0aGlzLmJpbmRFdmVudCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykgewogICAgICBvcHRpb25zID0gdXRpbHMubWVyZ2VBcnJheXMoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpOwoKICAgICAgdmFyIGVsZW1lbnRzID0gdXRpbHMudG9FbGVtZW50c0FycmF5KHRoaXMpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIGV2ZW50c0J1Y2tldC5hZGRFdmVudChlbGVtZW50c1tpXSwgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgICAgfQogICAgfTsKCiAgICB0aGlzLnVuYmluZEV2ZW50ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTsKICAgICAgZXZlbnRzQnVja2V0LnJlbW92ZUV2ZW50KGZ1bmN0aW9uKGV2ZW50T2JqKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHRoaXMgPT09IHVuZGVmaW5lZCB8fCBldmVudE9iai50YXJnZXQgPT09IGVsZW1lbnRzW2ldKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0pOwogICAgfTsKCiAgICB0aGlzLnVuYmluZEV2ZW50V2l0aFNlbGVjdG9yT3JDYWxsYmFjayA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKSwKICAgICAgICAgIGNhbGxiYWNrID0gc2VsZWN0b3IsCiAgICAgICAgICBjb21wYXJlRnVuY3Rpb247CgogICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgY29tcGFyZUZ1bmN0aW9uID0gZnVuY3Rpb24oZXZlbnRPYmopIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKCh0aGlzID09PSB1bmRlZmluZWQgfHwgZXZlbnRPYmoudGFyZ2V0ID09PSBlbGVtZW50c1tpXSkgJiYgZXZlbnRPYmouY2FsbGJhY2sgPT09IGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9OwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIGNvbXBhcmVGdW5jdGlvbiA9IGZ1bmN0aW9uKGV2ZW50T2JqKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICgodGhpcyA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50T2JqLnRhcmdldCA9PT0gZWxlbWVudHNbaV0pICYmIGV2ZW50T2JqLnNlbGVjdG9yID09PSBzZWxlY3RvcikgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfTsKICAgICAgfQogICAgICBldmVudHNCdWNrZXQucmVtb3ZlRXZlbnQoY29tcGFyZUZ1bmN0aW9uKTsKICAgIH07CgogICAgdGhpcy51bmJpbmRFdmVudFdpdGhTZWxlY3RvckFuZENhbGxiYWNrID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTsKICAgICAgZXZlbnRzQnVja2V0LnJlbW92ZUV2ZW50KGZ1bmN0aW9uKGV2ZW50T2JqKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICgodGhpcyA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50T2JqLnRhcmdldCA9PT0gZWxlbWVudHNbaV0pICYmIGV2ZW50T2JqLnNlbGVjdG9yID09PSBzZWxlY3RvciAmJiBldmVudE9iai5jYWxsYmFjayA9PT0gY2FsbGJhY2spIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9KTsKICAgIH07CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKCgogIC8qKgogICAqIEBjb25zdHJ1Y3RvcgogICAqIFByb2Nlc3NlcyAnYXJyaXZlJyBldmVudHMKICAgKi8KICB2YXIgQXJyaXZlRXZlbnRzID0gZnVuY3Rpb24oKSB7CiAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yICdhcnJpdmUnIGV2ZW50CiAgICB2YXIgYXJyaXZlRGVmYXVsdE9wdGlvbnMgPSB7CiAgICAgIGZpcmVPbkF0dHJpYnV0ZXNNb2RpZmljYXRpb246IGZhbHNlLAogICAgICBvbmNlT25seTogZmFsc2UsCiAgICAgIGV4aXN0aW5nOiBmYWxzZQogICAgfTsKCiAgICBmdW5jdGlvbiBnZXRBcnJpdmVPYnNlcnZlckNvbmZpZyhvcHRpb25zKSB7CiAgICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgYXR0cmlidXRlczogZmFsc2UsCiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICAgIHN1YnRyZWU6IHRydWUKICAgICAgfTsKCiAgICAgIGlmIChvcHRpb25zLmZpcmVPbkF0dHJpYnV0ZXNNb2RpZmljYXRpb24pIHsKICAgICAgICBjb25maWcuYXR0cmlidXRlcyA9IHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb25maWc7CiAgICB9CgogICAgZnVuY3Rpb24gb25BcnJpdmVNdXRhdGlvbihtdXRhdGlvbnMsIHJlZ2lzdHJhdGlvbkRhdGEpIHsKICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24oIG11dGF0aW9uICkgewogICAgICAgIHZhciBuZXdOb2RlcyAgICA9IG11dGF0aW9uLmFkZGVkTm9kZXMsCiAgICAgICAgICAgIHRhcmdldE5vZGUgPSBtdXRhdGlvbi50YXJnZXQsCiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQgPSBbXSwKICAgICAgICAgICAgbm9kZTsKCiAgICAgICAgLy8gSWYgbmV3IG5vZGVzIGFyZSBhZGRlZAogICAgICAgIGlmKCBuZXdOb2RlcyAhPT0gbnVsbCAmJiBuZXdOb2Rlcy5sZW5ndGggPiAwICkgewogICAgICAgICAgdXRpbHMuY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHkobmV3Tm9kZXMsIHJlZ2lzdHJhdGlvbkRhdGEsIG5vZGVNYXRjaEZ1bmMsIGNhbGxiYWNrc1RvQmVDYWxsZWQpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChtdXRhdGlvbi50eXBlID09PSAiYXR0cmlidXRlcyIpIHsKICAgICAgICAgIGlmIChub2RlTWF0Y2hGdW5jKHRhcmdldE5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEsIGNhbGxiYWNrc1RvQmVDYWxsZWQpKSB7CiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQucHVzaCh7IGNhbGxiYWNrOiByZWdpc3RyYXRpb25EYXRhLmNhbGxiYWNrLCBlbGVtOiB0YXJnZXROb2RlIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdXRpbHMuY2FsbENhbGxiYWNrcyhjYWxsYmFja3NUb0JlQ2FsbGVkLCByZWdpc3RyYXRpb25EYXRhKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gbm9kZU1hdGNoRnVuYyhub2RlLCByZWdpc3RyYXRpb25EYXRhLCBjYWxsYmFja3NUb0JlQ2FsbGVkKSB7CiAgICAgIC8vIGNoZWNrIGEgc2luZ2xlIG5vZGUgdG8gc2VlIGlmIGl0IG1hdGNoZXMgdGhlIHNlbGVjdG9yCiAgICAgIGlmICh1dGlscy5tYXRjaGVzU2VsZWN0b3Iobm9kZSwgcmVnaXN0cmF0aW9uRGF0YS5zZWxlY3RvcikpIHsKICAgICAgICBpZihub2RlLl9pZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBub2RlLl9pZCA9IGFycml2ZVVuaXF1ZUlkKys7CiAgICAgICAgfQogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYXJyaXZlIGV2ZW50IGlzIG5vdCBhbHJlYWR5IGZpcmVkIGZvciB0aGUgZWxlbWVudAogICAgICAgIGlmIChyZWdpc3RyYXRpb25EYXRhLmZpcmVkRWxlbXMuaW5kZXhPZihub2RlLl9pZCkgPT0gLTEpIHsKICAgICAgICAgIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5wdXNoKG5vZGUuX2lkKTsKCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBhcnJpdmVFdmVudHMgPSBuZXcgTXV0YXRpb25FdmVudHMoZ2V0QXJyaXZlT2JzZXJ2ZXJDb25maWcsIG9uQXJyaXZlTXV0YXRpb24pOwoKICAgIHZhciBtdXRhdGlvbkJpbmRFdmVudCA9IGFycml2ZUV2ZW50cy5iaW5kRXZlbnQ7CgogICAgLy8gb3ZlcnJpZGUgYmluZEV2ZW50IGZ1bmN0aW9uCiAgICBhcnJpdmVFdmVudHMuYmluZEV2ZW50ID0gZnVuY3Rpb24oc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAidW5kZWZpbmVkIikgewogICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0gYXJyaXZlRGVmYXVsdE9wdGlvbnM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3B0aW9ucyA9IHV0aWxzLm1lcmdlQXJyYXlzKGFycml2ZURlZmF1bHRPcHRpb25zLCBvcHRpb25zKTsKICAgICAgfQoKICAgICAgdmFyIGVsZW1lbnRzID0gdXRpbHMudG9FbGVtZW50c0FycmF5KHRoaXMpOwoKICAgICAgaWYgKG9wdGlvbnMuZXhpc3RpbmcpIHsKICAgICAgICB2YXIgZXhpc3RpbmcgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgdmFyIG5vZGVzID0gZWxlbWVudHNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5vZGVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgIGV4aXN0aW5nLnB1c2goeyBjYWxsYmFjazogY2FsbGJhY2ssIGVsZW06IG5vZGVzW2pdIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gbm8gbmVlZCB0byBiaW5kIGV2ZW50IGlmIHRoZSBjYWxsYmFjayBoYXMgdG8gYmUgZmlyZWQgb25seSBvbmNlIGFuZCB3ZSBoYXZlIGFscmVhZHkgZm91bmQgdGhlIGVsZW1lbnQKICAgICAgICBpZiAob3B0aW9ucy5vbmNlT25seSAmJiBleGlzdGluZy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKGV4aXN0aW5nWzBdLmVsZW0sIGV4aXN0aW5nWzBdLmVsZW0pOwogICAgICAgIH0KCiAgICAgICAgc2V0VGltZW91dCh1dGlscy5jYWxsQ2FsbGJhY2tzLCAxLCBleGlzdGluZyk7CiAgICAgIH0KCiAgICAgIG11dGF0aW9uQmluZEV2ZW50LmNhbGwodGhpcywgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgIH07CgogICAgcmV0dXJuIGFycml2ZUV2ZW50czsKICB9OwoKCiAgLyoqCiAgICogQGNvbnN0cnVjdG9yCiAgICogUHJvY2Vzc2VzICdsZWF2ZScgZXZlbnRzCiAgICovCiAgdmFyIExlYXZlRXZlbnRzID0gZnVuY3Rpb24oKSB7CiAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yICdsZWF2ZScgZXZlbnQKICAgIHZhciBsZWF2ZURlZmF1bHRPcHRpb25zID0ge307CgogICAgZnVuY3Rpb24gZ2V0TGVhdmVPYnNlcnZlckNvbmZpZygpIHsKICAgICAgdmFyIGNvbmZpZyA9IHsKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgc3VidHJlZTogdHJ1ZQogICAgICB9OwoKICAgICAgcmV0dXJuIGNvbmZpZzsKICAgIH0KCiAgICBmdW5jdGlvbiBvbkxlYXZlTXV0YXRpb24obXV0YXRpb25zLCByZWdpc3RyYXRpb25EYXRhKSB7CiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKCBtdXRhdGlvbiApIHsKICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzICA9IG11dGF0aW9uLnJlbW92ZWROb2RlcywKICAgICAgICAgICAgY2FsbGJhY2tzVG9CZUNhbGxlZCA9IFtdOwoKICAgICAgICBpZiggcmVtb3ZlZE5vZGVzICE9PSBudWxsICYmIHJlbW92ZWROb2Rlcy5sZW5ndGggPiAwICkgewogICAgICAgICAgdXRpbHMuY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHkocmVtb3ZlZE5vZGVzLCByZWdpc3RyYXRpb25EYXRhLCBub2RlTWF0Y2hGdW5jLCBjYWxsYmFja3NUb0JlQ2FsbGVkKTsKICAgICAgICB9CgogICAgICAgIHV0aWxzLmNhbGxDYWxsYmFja3MoY2FsbGJhY2tzVG9CZUNhbGxlZCwgcmVnaXN0cmF0aW9uRGF0YSk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIG5vZGVNYXRjaEZ1bmMobm9kZSwgcmVnaXN0cmF0aW9uRGF0YSkgewogICAgICByZXR1cm4gdXRpbHMubWF0Y2hlc1NlbGVjdG9yKG5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEuc2VsZWN0b3IpOwogICAgfQoKICAgIGxlYXZlRXZlbnRzID0gbmV3IE11dGF0aW9uRXZlbnRzKGdldExlYXZlT2JzZXJ2ZXJDb25maWcsIG9uTGVhdmVNdXRhdGlvbik7CgogICAgdmFyIG11dGF0aW9uQmluZEV2ZW50ID0gbGVhdmVFdmVudHMuYmluZEV2ZW50OwoKICAgIC8vIG92ZXJyaWRlIGJpbmRFdmVudCBmdW5jdGlvbgogICAgbGVhdmVFdmVudHMuYmluZEV2ZW50ID0gZnVuY3Rpb24oc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAidW5kZWZpbmVkIikgewogICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0gbGVhdmVEZWZhdWx0T3B0aW9uczsKICAgICAgfSBlbHNlIHsKICAgICAgICBvcHRpb25zID0gdXRpbHMubWVyZ2VBcnJheXMobGVhdmVEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIG11dGF0aW9uQmluZEV2ZW50LmNhbGwodGhpcywgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgIH07CgogICAgcmV0dXJuIGxlYXZlRXZlbnRzOwogIH07CgoKICB2YXIgYXJyaXZlRXZlbnRzID0gbmV3IEFycml2ZUV2ZW50cygpLAogICAgICBsZWF2ZUV2ZW50cyAgPSBuZXcgTGVhdmVFdmVudHMoKTsKCiAgZnVuY3Rpb24gZXhwb3NlVW5iaW5kQXBpKGV2ZW50T2JqLCBleHBvc2VUbywgZnVuY05hbWUpIHsKICAgIC8vIGV4cG9zZSB1bmJpbmQgZnVuY3Rpb24gd2l0aCBmdW5jdGlvbiBvdmVycmlkaW5nCiAgICB1dGlscy5hZGRNZXRob2QoZXhwb3NlVG8sIGZ1bmNOYW1lLCBldmVudE9iai51bmJpbmRFdmVudCk7CiAgICB1dGlscy5hZGRNZXRob2QoZXhwb3NlVG8sIGZ1bmNOYW1lLCBldmVudE9iai51bmJpbmRFdmVudFdpdGhTZWxlY3Rvck9yQ2FsbGJhY2spOwogICAgdXRpbHMuYWRkTWV0aG9kKGV4cG9zZVRvLCBmdW5jTmFtZSwgZXZlbnRPYmoudW5iaW5kRXZlbnRXaXRoU2VsZWN0b3JBbmRDYWxsYmFjayk7CiAgfQoKICAvKioqIGV4cG9zZSBBUElzICoqKi8KICBmdW5jdGlvbiBleHBvc2VBcGkoZXhwb3NlVG8pIHsKICAgIGV4cG9zZVRvLmFycml2ZSA9IGFycml2ZUV2ZW50cy5iaW5kRXZlbnQ7CiAgICBleHBvc2VVbmJpbmRBcGkoYXJyaXZlRXZlbnRzLCBleHBvc2VUbywgInVuYmluZEFycml2ZSIpOwoKICAgIGV4cG9zZVRvLmxlYXZlID0gbGVhdmVFdmVudHMuYmluZEV2ZW50OwogICAgZXhwb3NlVW5iaW5kQXBpKGxlYXZlRXZlbnRzLCBleHBvc2VUbywgInVuYmluZExlYXZlIik7CiAgfQoKICBpZiAoJCkgewogICAgZXhwb3NlQXBpKCQuZm4pOwogIH0KICBleHBvc2VBcGkoSFRNTEVsZW1lbnQucHJvdG90eXBlKTsKICBleHBvc2VBcGkoTm9kZUxpc3QucHJvdG90eXBlKTsKICBleHBvc2VBcGkoSFRNTENvbGxlY3Rpb24ucHJvdG90eXBlKTsKICBleHBvc2VBcGkoSFRNTERvY3VtZW50LnByb3RvdHlwZSk7CiAgZXhwb3NlQXBpKFdpbmRvdy5wcm90b3R5cGUpOwoKICB2YXIgQXJyaXZlID0ge307CiAgLy8gZXhwb3NlIGZ1bmN0aW9ucyB0byB1bmJpbmQgYWxsIGFycml2ZS9sZWF2ZSBldmVudHMKICBleHBvc2VVbmJpbmRBcGkoYXJyaXZlRXZlbnRzLCBBcnJpdmUsICJ1bmJpbmRBbGxBcnJpdmUiKTsKICBleHBvc2VVbmJpbmRBcGkobGVhdmVFdmVudHMsIEFycml2ZSwgInVuYmluZEFsbExlYXZlIik7CgogIHJldHVybiBBcnJpdmU7Cgp9KSh3aW5kb3csIHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGpRdWVyeSwgdW5kZWZpbmVkKTs="}]},{"name":"[Pixlr] Unlimited Saves","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://pixlr.com/*/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685019766812,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/460881-pixlr-unlimited-saves/code/%5BPixlr%5D%20Unlimited%20Saves.user.js","uuid":"364ae7c9-ecbf-4582-b64f-5d0227ba4f00","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFtQaXhscl0gVW5saW1pdGVkIFNhdmVzCi8vIEBuYW1lc3BhY2UgICBIS1IKLy8gQG1hdGNoICAgICAgIGh0dHBzOi8vcGl4bHIuY29tLyovKgovLyBAZ3JhbnQgICAgICAgbm9uZQovLyBAdmVyc2lvbiAgICAgMS4wCi8vIEBhdXRob3IgICAgICBIS1IKLy8gQGRlc2NyaXB0aW9uIEJ5cGFzc2VzIHRoZSBkYWlseSBzYXZlIGxpbWl0Ci8vIEBydW4tYXQgICAgICBkb2N1bWVudC1zdGFydAovLyA9PS9Vc2VyU2NyaXB0PT0KCigoKSA9PiB7CiAgICBjb25zdCByZXBsYWNlbWVudFJlZ2V4ID0gL1woXClccyo+PVxzKjMvZzsKICAgIGNvbnN0IGJ5cGFzc1N0ciA9IGAoKT09J0QnYDsKCiAgICBmdW5jdGlvbiBwYXRjaE5vZGUobm9kZSkgewogICAgICAgIG5vZGU/LnJlbW92ZSgpOwoKICAgICAgICBmZXRjaChub2RlLnNyYykKICAgICAgICAgICAgLnRoZW4ocmVzID0+IHJlcy50ZXh0KCkpCiAgICAgICAgICAgIC50aGVuKHRleHQgPT4gewogICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShyZXBsYWNlbWVudFJlZ2V4LCBieXBhc3NTdHIpOwoKICAgICAgICAgICAgICAgIGlmKCF0ZXh0LmluY2x1ZGVzKGJ5cGFzc1N0cikpIHsKICAgICAgICAgICAgICAgICAgICBhbGVydChgRGFpbHkgbGltaXQgYnlwYXNzIGZhaWxlZCwgdGhlIHVzZXJzY3JpcHQgbWF5IGJlIG91dGRhdGVkIWApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0IG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUuaW5uZXJIVE1MID0gdGV4dDsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5ld05vZGUpOwogICAgICAgICAgICB9KTsKICAgIH0KCiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnNMaXN0ID0+IHsKICAgICAgICBtdXRhdGlvbnNMaXN0LmZvckVhY2gobXV0YXRpb25SZWNvcmQgPT4gewogICAgICAgICAgWy4uLm11dGF0aW9uUmVjb3JkLmFkZGVkTm9kZXNdCiAgICAgICAgICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLnRhZ05hbWUgPT09ICdTQ1JJUFQnICYmIG5vZGUuc3JjPy5pbmNsdWRlcygnL2Rpc3QvJykpCiAgICAgICAgICAgIC5mb3JFYWNoKG5vZGUgPT4gcGF0Y2hOb2RlKG5vZGUpKTsKICAgICAgICB9KTsKICAgIH0pLm9ic2VydmUoZG9jdW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pOwp9KSgpOw=="},{"name":"[Pixlr X] Premium Content Remover","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://pixlr.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685019777343,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/425737-pixlr-x-premium-content-remover/code/%5BPixlr%20X%5D%20Premium%20Content%20Remover.user.js","uuid":"2ef51720-c5b0-4260-b971-55165d67f196","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBbUGl4bHIgWF0gUHJlbWl1bSBDb250ZW50IFJlbW92ZXIKLy8gQHZlcnNpb24gICAgICAyLjEKLy8gQGRlc2NyaXB0aW9uICBSZW1vdmVzIHByZW1pdW0gZmVhdHVyZXMgb24gUGl4bHIuY29tLCBiZWNhdXNlIHRoZXkgYXJlIGp1c3Qgb24geW91ciB3YXkuCi8vIEBhdXRob3IgICAgICAgSEtSCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9waXhsci5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gQG5hbWVzcGFjZSAgICBIS1IKLy8gQHN1cHBvcnRVUkwgICBodHRwczovL2dpdGh1Yi5jb20vSGFrb3JyL1VzZXJzY3JpcHRzL2lzc3VlcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8yMTkyNy1hcnJpdmUtanMvY29kZS9hcnJpdmVqcy5qcwovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vID09L1VzZXJTY3JpcHQ9PQoKKCgpID0+IHsKY29uc3QgdXNlclNjcmlwdE5hbWUgPSAiW1ByZW1pdW0gQ29udGVudCBSZW1vdmVyXSI7CmxldCBjb3VudCA9IDE7CmNvbnNvbGUubG9nKGAke3VzZXJTY3JpcHROYW1lfSBTdGFydGVkIWApOwoKR01fYWRkU3R5bGUoJyNzbmVha3kgeyB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDsgfScpOwoKY29uc3QgcmVtb3ZlTGlzdCA9IFsKICAgICIucHJlbWl1bSIsCiAgICAiLmdldC1wcmVtaXVtIiwKICAgICIjdHJ5LXByZW1pdW0iLAogICAgIiN0b29sLWdsaXRjaCIsCiAgICAiI3Rvb2wtZm9jdXMiLAogICAgIiN0b29sLWRpc3BlcnNpb24iLAogICAgIiNjdXRvdXQtYXV0byIsCiAgICAiI21vZGFsLXBvcCIKXTsKCmZ1bmN0aW9uIGhhbmRsZVByZW1pdW1FbGVtZW50KGVsZW0pIHsKICAgIGNvbnNvbGUubG9nKGAke3VzZXJTY3JpcHROYW1lfSBSZW1vdmVkIGEgcHJlbWl1bSBlbGVtZW50ISAoJHtjb3VudCsrfSlgKTsKICAKICAgIC8vQ2hlY2sgYnkgZWxlbWVudCBjbGFzcwogICAgc3dpdGNoKGVsZW0uZ2V0QXR0cmlidXRlKCJjbGFzcyIpKSB7CiAgICAgIGNhc2UgImJ1dHRvbiBzbWFsbCBvdXRsaW5lIHBhZC0yMCBwcmVtaXVtIjoKICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgY29uc29sZS5sb2coZWxlbSk7CiAgICAgICAgcmV0dXJuOwogICAgfQogIAogICAgLy9DaGVjayBieSBlbGVtZW50J3MgcGFyZW50J3MgY2xhc3MKICAgIHN3aXRjaChlbGVtLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCJjbGFzcyIpKSB7CiAgICAgIGNhc2UgInRlbXBsYXRlLWJveCBsYXJnZSI6ICJ0ZW1wbGF0ZS1ib3giOwogICAgICAgICAgZWxlbS5wYXJlbnRFbGVtZW50Lm91dGVySFRNTCA9ICIiOwogICAgICAgICAgY29uc29sZS5sb2coZWxlbSk7CiAgICAgICAgICByZXR1cm47CgogICAgICBjYXNlICJlbGVtZW50LWdyb3VwIjoKICAgICAgICAgIGVsZW0ucmVtb3ZlKCk7CiAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtKTsKICAgICAgICAgIHJldHVybjsKICAgIH0KICAgIAogICAgLy9EZWZhdWx0CiAgICBlbGVtLm91dGVySFRNTCA9ICIiOwogICAgY29uc29sZS5sb2coZWxlbSk7Cn0KCmZ1bmN0aW9uIGdldFByZW1pdW1FbGVtZW50cyhlbGVtKSB7CiAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbSkpLmZvckVhY2goZWxlbSA9PiB7CiAgICAgICAgaGFuZGxlUHJlbWl1bUVsZW1lbnQoZWxlbSk7CiAgICB9KTsKfQoKZnVuY3Rpb24gcmVtb3ZlKGVsZW0pIHsKICAgIGdldFByZW1pdW1FbGVtZW50cyhlbGVtKTsKICAgIGRvY3VtZW50LmFycml2ZShlbGVtLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgZ2V0UHJlbWl1bUVsZW1lbnRzKGVsZW0pOwogICAgfSk7Cn0KCnJlbW92ZUxpc3QuZm9yRWFjaChlbGVtID0+IHsKICAgIHJlbW92ZShlbGVtKTsKfSk7Cn0pKCk7Cg==","requires":[{"meta":{"name":"arrivejs.js","url":"https://greasyfork.org/scripts/21927-arrive-js/code/arrivejs.js","ts":1685019777609,"mimetype":"text/javascript"},"source":"LypnbG9iYWxzIGpRdWVyeSxXaW5kb3csSFRNTEVsZW1lbnQsSFRNTERvY3VtZW50LEhUTUxDb2xsZWN0aW9uLE5vZGVMaXN0LE11dGF0aW9uT2JzZXJ2ZXIgKi8KLypleHBvcnRlZCBBcnJpdmUqLwovKmpzaGludCBsYXRlZGVmOmZhbHNlICovCgovKgogKiBhcnJpdmUuanMKICogdjIuNC4xCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS91emFpcmZhcm9vcS9hcnJpdmUKICogTUlUIGxpY2Vuc2VkCiAqCiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3IFV6YWlyIEZhcm9vcQogKi8KdmFyIEFycml2ZSA9IChmdW5jdGlvbih3aW5kb3csICQsIHVuZGVmaW5lZCkgewoKICAidXNlIHN0cmljdCI7CgogIGlmKCF3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICd1bmRlZmluZWQnKXsKICAgIHJldHVybjsgLy9mb3IgdW5zdXBwb3J0ZWQgYnJvd3NlcnMKICB9CgogIHZhciBhcnJpdmVVbmlxdWVJZCA9IDA7CgogIHZhciB1dGlscyA9IChmdW5jdGlvbigpIHsKICAgIHZhciBtYXRjaGVzID0gSFRNTEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHwgSFRNTEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBIVE1MRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yCiAgICAgICAgICAgICAgICAgIHx8IEhUTUxFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvcjsKCiAgICByZXR1cm4gewogICAgICBtYXRjaGVzU2VsZWN0b3I6IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBtYXRjaGVzLmNhbGwoZWxlbSwgc2VsZWN0b3IpOwogICAgICB9LAogICAgICAvLyB0byBlbmFibGUgZnVuY3Rpb24gb3ZlcmxvYWRpbmcgLSBCeSBKb2huIFJlc2lnIChNSVQgTGljZW5zZWQpCiAgICAgIGFkZE1ldGhvZDogZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgZm4pIHsKICAgICAgICB2YXIgb2xkID0gb2JqZWN0WyBuYW1lIF07CiAgICAgICAgb2JqZWN0WyBuYW1lIF0gPSBmdW5jdGlvbigpewogICAgICAgICAgaWYgKCBmbi5sZW5ndGggPT0gYXJndW1lbnRzLmxlbmd0aCApIHsKICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKCB0eXBlb2Ygb2xkID09ICdmdW5jdGlvbicgKSB7CiAgICAgICAgICAgIHJldHVybiBvbGQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0sCiAgICAgIGNhbGxDYWxsYmFja3M6IGZ1bmN0aW9uKGNhbGxiYWNrc1RvQmVDYWxsZWQsIHJlZ2lzdHJhdGlvbkRhdGEpIHsKICAgICAgICBpZiAocmVnaXN0cmF0aW9uRGF0YSAmJiByZWdpc3RyYXRpb25EYXRhLm9wdGlvbnMub25jZU9ubHkgJiYgcmVnaXN0cmF0aW9uRGF0YS5maXJlZEVsZW1zLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAvLyBhcyBvbmx5T25jZSBwYXJhbSBpcyB0cnVlLCBtYWtlIHN1cmUgd2UgZmlyZSB0aGUgZXZlbnQgZm9yIG9ubHkgb25lIGl0ZW0KICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQgPSBbY2FsbGJhY2tzVG9CZUNhbGxlZFswXV07CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBpID0gMCwgY2I7IChjYiA9IGNhbGxiYWNrc1RvQmVDYWxsZWRbaV0pOyBpKyspIHsKICAgICAgICAgIGlmIChjYiAmJiBjYi5jYWxsYmFjaykgewogICAgICAgICAgICBjYi5jYWxsYmFjay5jYWxsKGNiLmVsZW0sIGNiLmVsZW0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbkRhdGEgJiYgcmVnaXN0cmF0aW9uRGF0YS5vcHRpb25zLm9uY2VPbmx5ICYmIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5sZW5ndGggPT0gMSkgewogICAgICAgICAgLy8gdW5iaW5kIGV2ZW50IGFmdGVyIGZpcnN0IGNhbGxiYWNrIGFzIG9uY2VPbmx5IGlzIHRydWUuCiAgICAgICAgICByZWdpc3RyYXRpb25EYXRhLm1lLnVuYmluZEV2ZW50V2l0aFNlbGVjdG9yQW5kQ2FsbGJhY2suY2FsbCgKICAgICAgICAgICAgcmVnaXN0cmF0aW9uRGF0YS50YXJnZXQsIHJlZ2lzdHJhdGlvbkRhdGEuc2VsZWN0b3IsIHJlZ2lzdHJhdGlvbkRhdGEuY2FsbGJhY2spOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gdHJhdmVyc2UgdGhyb3VnaCBhbGwgZGVzY2VuZGFudHMgb2YgYSBub2RlIHRvIGNoZWNrIGlmIGV2ZW50IHNob3VsZCBiZSBmaXJlZCBmb3IgYW55IGRlc2NlbmRhbnQKICAgICAgY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHk6IGZ1bmN0aW9uKG5vZGVzLCByZWdpc3RyYXRpb25EYXRhLCBtYXRjaEZ1bmMsIGNhbGxiYWNrc1RvQmVDYWxsZWQpIHsKICAgICAgICAvLyBjaGVjayBlYWNoIG5ldyBub2RlIGlmIGl0IG1hdGNoZXMgdGhlIHNlbGVjdG9yCiAgICAgICAgZm9yICh2YXIgaT0wLCBub2RlOyAobm9kZSA9IG5vZGVzW2ldKTsgaSsrKSB7CiAgICAgICAgICBpZiAobWF0Y2hGdW5jKG5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEsIGNhbGxiYWNrc1RvQmVDYWxsZWQpKSB7CiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQucHVzaCh7IGNhbGxiYWNrOiByZWdpc3RyYXRpb25EYXRhLmNhbGxiYWNrLCBlbGVtOiBub2RlIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICB1dGlscy5jaGVja0NoaWxkTm9kZXNSZWN1cnNpdmVseShub2RlLmNoaWxkTm9kZXMsIHJlZ2lzdHJhdGlvbkRhdGEsIG1hdGNoRnVuYywgY2FsbGJhY2tzVG9CZUNhbGxlZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBtZXJnZUFycmF5czogZnVuY3Rpb24oZmlyc3RBcnIsIHNlY29uZEFycil7CiAgICAgICAgLy8gT3ZlcndyaXRlcyBkZWZhdWx0IG9wdGlvbnMgd2l0aCB1c2VyLWRlZmluZWQgb3B0aW9ucy4KICAgICAgICB2YXIgb3B0aW9ucyA9IHt9LAogICAgICAgICAgICBhdHRyTmFtZTsKICAgICAgICBmb3IgKGF0dHJOYW1lIGluIGZpcnN0QXJyKSB7CiAgICAgICAgICBpZiAoZmlyc3RBcnIuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7CiAgICAgICAgICAgIG9wdGlvbnNbYXR0ck5hbWVdID0gZmlyc3RBcnJbYXR0ck5hbWVdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGF0dHJOYW1lIGluIHNlY29uZEFycikgewogICAgICAgICAgaWYgKHNlY29uZEFyci5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHsKICAgICAgICAgICAgb3B0aW9uc1thdHRyTmFtZV0gPSBzZWNvbmRBcnJbYXR0ck5hbWVdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gb3B0aW9uczsKICAgICAgfSwKICAgICAgdG9FbGVtZW50c0FycmF5OiBmdW5jdGlvbiAoZWxlbWVudHMpIHsKICAgICAgICAvLyBjaGVjayBpZiBvYmplY3QgaXMgYW4gYXJyYXkgKG9yIGFycmF5IGxpa2Ugb2JqZWN0KQogICAgICAgIC8vIE5vdGU6IHdpbmRvdyBvYmplY3QgaGFzIC5sZW5ndGggcHJvcGVydHkgYnV0IGl0J3Mgbm90IGFycmF5IG9mIGVsZW1lbnRzIHNvIGRvbid0IGNvbnNpZGVyIGl0IGFuIGFycmF5CiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50cyAhPT0gInVuZGVmaW5lZCIgJiYgKHR5cGVvZiBlbGVtZW50cy5sZW5ndGggIT09ICJudW1iZXIiIHx8IGVsZW1lbnRzID09PSB3aW5kb3cpKSB7CiAgICAgICAgICBlbGVtZW50cyA9IFtlbGVtZW50c107CiAgICAgICAgfQogICAgICAgIHJldHVybiBlbGVtZW50czsKICAgICAgfQogICAgfTsKICB9KSgpOwoKCiAgLy8gQ2xhc3MgdG8gbWFpbnRhaW4gc3RhdGUgb2YgYWxsIHJlZ2lzdGVyZWQgZXZlbnRzIG9mIGEgc2luZ2xlIHR5cGUKICB2YXIgRXZlbnRzQnVja2V0ID0gKGZ1bmN0aW9uKCkgewogICAgdmFyIEV2ZW50c0J1Y2tldCA9IGZ1bmN0aW9uKCkgewogICAgICAvLyBob2xkcyBhbGwgdGhlIGV2ZW50cwoKICAgICAgdGhpcy5fZXZlbnRzQnVja2V0ICAgID0gW107CiAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGlsZSBhZGRpbmcgYW4gZXZlbnQsIHRoZSBmdW5jdGlvbiBzaG91bGQgZG8gdGhlIGV2ZW50IGluaXRpYWxpemF0aW9uL3JlZ2lzdHJhdGlvbgogICAgICB0aGlzLl9iZWZvcmVBZGRpbmcgICAgPSBudWxsOwogICAgICAvLyBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hpbGUgcmVtb3ZpbmcgYW4gZXZlbnQsIHRoZSBmdW5jdGlvbiBzaG91bGQgZG8gdGhlIGV2ZW50IGRlc3RydWN0aW9uCiAgICAgIHRoaXMuX2JlZm9yZVJlbW92aW5nICA9IG51bGw7CiAgICB9OwoKICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbih0YXJnZXQsIHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykgewogICAgICB2YXIgbmV3RXZlbnQgPSB7CiAgICAgICAgdGFyZ2V0OiAgICAgICAgICAgICB0YXJnZXQsCiAgICAgICAgc2VsZWN0b3I6ICAgICAgICAgICBzZWxlY3RvciwKICAgICAgICBvcHRpb25zOiAgICAgICAgICAgIG9wdGlvbnMsCiAgICAgICAgY2FsbGJhY2s6ICAgICAgICAgICBjYWxsYmFjaywKICAgICAgICBmaXJlZEVsZW1zOiAgICAgICAgIFtdCiAgICAgIH07CgogICAgICBpZiAodGhpcy5fYmVmb3JlQWRkaW5nKSB7CiAgICAgICAgdGhpcy5fYmVmb3JlQWRkaW5nKG5ld0V2ZW50KTsKICAgICAgfQoKICAgICAgdGhpcy5fZXZlbnRzQnVja2V0LnB1c2gobmV3RXZlbnQpOwogICAgICByZXR1cm4gbmV3RXZlbnQ7CiAgICB9OwoKICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbihjb21wYXJlRnVuY3Rpb24pIHsKICAgICAgZm9yICh2YXIgaT10aGlzLl9ldmVudHNCdWNrZXQubGVuZ3RoIC0gMSwgcmVnaXN0ZXJlZEV2ZW50OyAocmVnaXN0ZXJlZEV2ZW50ID0gdGhpcy5fZXZlbnRzQnVja2V0W2ldKTsgaS0tKSB7CiAgICAgICAgaWYgKGNvbXBhcmVGdW5jdGlvbihyZWdpc3RlcmVkRXZlbnQpKSB7CiAgICAgICAgICBpZiAodGhpcy5fYmVmb3JlUmVtb3ZpbmcpIHsKICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVSZW1vdmluZyhyZWdpc3RlcmVkRXZlbnQpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIG1hcmsgY2FsbGJhY2sgYXMgbnVsbCBzbyB0aGF0IGV2ZW4gaWYgYW4gZXZlbnQgbXV0YXRpb24gd2FzIGFscmVhZHkgdHJpZ2dlcmVkIGl0IGRvZXMgbm90IGNhbGwgY2FsbGJhY2sKICAgICAgICAgIHZhciByZW1vdmVkRXZlbnRzID0gdGhpcy5fZXZlbnRzQnVja2V0LnNwbGljZShpLCAxKTsKICAgICAgICAgIGlmIChyZW1vdmVkRXZlbnRzICYmIHJlbW92ZWRFdmVudHMubGVuZ3RoKSB7CiAgICAgICAgICAgIHJlbW92ZWRFdmVudHNbMF0uY2FsbGJhY2sgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBFdmVudHNCdWNrZXQucHJvdG90eXBlLmJlZm9yZUFkZGluZyA9IGZ1bmN0aW9uKGJlZm9yZUFkZGluZykgewogICAgICB0aGlzLl9iZWZvcmVBZGRpbmcgPSBiZWZvcmVBZGRpbmc7CiAgICB9OwoKICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUuYmVmb3JlUmVtb3ZpbmcgPSBmdW5jdGlvbihiZWZvcmVSZW1vdmluZykgewogICAgICB0aGlzLl9iZWZvcmVSZW1vdmluZyA9IGJlZm9yZVJlbW92aW5nOwogICAgfTsKCiAgICByZXR1cm4gRXZlbnRzQnVja2V0OwogIH0pKCk7CgoKICAvKioKICAgKiBAY29uc3RydWN0b3IKICAgKiBHZW5lcmFsIGNsYXNzIGZvciBiaW5kaW5nL3VuYmluZGluZyBhcnJpdmUgYW5kIGxlYXZlIGV2ZW50cwogICAqLwogIHZhciBNdXRhdGlvbkV2ZW50cyA9IGZ1bmN0aW9uKGdldE9ic2VydmVyQ29uZmlnLCBvbk11dGF0aW9uKSB7CiAgICB2YXIgZXZlbnRzQnVja2V0ICAgID0gbmV3IEV2ZW50c0J1Y2tldCgpLAogICAgICAgIG1lICAgICAgICAgICAgICA9IHRoaXM7CgogICAgdmFyIGRlZmF1bHRPcHRpb25zID0gewogICAgICBmaXJlT25BdHRyaWJ1dGVzTW9kaWZpY2F0aW9uOiBmYWxzZQogICAgfTsKCiAgICAvLyBhY3R1YWwgZXZlbnQgcmVnaXN0cmF0aW9uIGJlZm9yZSBhZGRpbmcgaXQgdG8gYnVja2V0CiAgICBldmVudHNCdWNrZXQuYmVmb3JlQWRkaW5nKGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbkRhdGEpIHsKICAgICAgdmFyCiAgICAgICAgdGFyZ2V0ICAgID0gcmVnaXN0cmF0aW9uRGF0YS50YXJnZXQsCiAgICAgICAgb2JzZXJ2ZXI7CgogICAgICAvLyBtdXRhdGlvbiBvYnNlcnZlciBkb2VzIG5vdCB3b3JrIG9uIHdpbmRvdyBvciBkb2N1bWVudAogICAgICBpZiAodGFyZ2V0ID09PSB3aW5kb3cuZG9jdW1lbnQgfHwgdGFyZ2V0ID09PSB3aW5kb3cpIHsKICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaHRtbCIpWzBdOwogICAgICB9CgogICAgICAvLyBDcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UKICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihlKSB7CiAgICAgICAgb25NdXRhdGlvbi5jYWxsKHRoaXMsIGUsIHJlZ2lzdHJhdGlvbkRhdGEpOwogICAgICB9KTsKCiAgICAgIHZhciBjb25maWcgPSBnZXRPYnNlcnZlckNvbmZpZyhyZWdpc3RyYXRpb25EYXRhLm9wdGlvbnMpOwoKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIGNvbmZpZyk7CgogICAgICByZWdpc3RyYXRpb25EYXRhLm9ic2VydmVyID0gb2JzZXJ2ZXI7CiAgICAgIHJlZ2lzdHJhdGlvbkRhdGEubWUgPSBtZTsKICAgIH0pOwoKICAgIC8vIGNsZWFudXAvdW5yZWdpc3RlciBiZWZvcmUgcmVtb3ZpbmcgYW4gZXZlbnQKICAgIGV2ZW50c0J1Y2tldC5iZWZvcmVSZW1vdmluZyhmdW5jdGlvbiAoZXZlbnREYXRhKSB7CiAgICAgIGV2ZW50RGF0YS5vYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICB9KTsKCiAgICB0aGlzLmJpbmRFdmVudCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykgewogICAgICBvcHRpb25zID0gdXRpbHMubWVyZ2VBcnJheXMoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpOwoKICAgICAgdmFyIGVsZW1lbnRzID0gdXRpbHMudG9FbGVtZW50c0FycmF5KHRoaXMpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIGV2ZW50c0J1Y2tldC5hZGRFdmVudChlbGVtZW50c1tpXSwgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgICAgfQogICAgfTsKCiAgICB0aGlzLnVuYmluZEV2ZW50ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTsKICAgICAgZXZlbnRzQnVja2V0LnJlbW92ZUV2ZW50KGZ1bmN0aW9uKGV2ZW50T2JqKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHRoaXMgPT09IHVuZGVmaW5lZCB8fCBldmVudE9iai50YXJnZXQgPT09IGVsZW1lbnRzW2ldKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0pOwogICAgfTsKCiAgICB0aGlzLnVuYmluZEV2ZW50V2l0aFNlbGVjdG9yT3JDYWxsYmFjayA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKSwKICAgICAgICAgIGNhbGxiYWNrID0gc2VsZWN0b3IsCiAgICAgICAgICBjb21wYXJlRnVuY3Rpb247CgogICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgY29tcGFyZUZ1bmN0aW9uID0gZnVuY3Rpb24oZXZlbnRPYmopIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKCh0aGlzID09PSB1bmRlZmluZWQgfHwgZXZlbnRPYmoudGFyZ2V0ID09PSBlbGVtZW50c1tpXSkgJiYgZXZlbnRPYmouY2FsbGJhY2sgPT09IGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9OwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIGNvbXBhcmVGdW5jdGlvbiA9IGZ1bmN0aW9uKGV2ZW50T2JqKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICgodGhpcyA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50T2JqLnRhcmdldCA9PT0gZWxlbWVudHNbaV0pICYmIGV2ZW50T2JqLnNlbGVjdG9yID09PSBzZWxlY3RvcikgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfTsKICAgICAgfQogICAgICBldmVudHNCdWNrZXQucmVtb3ZlRXZlbnQoY29tcGFyZUZ1bmN0aW9uKTsKICAgIH07CgogICAgdGhpcy51bmJpbmRFdmVudFdpdGhTZWxlY3RvckFuZENhbGxiYWNrID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTsKICAgICAgZXZlbnRzQnVja2V0LnJlbW92ZUV2ZW50KGZ1bmN0aW9uKGV2ZW50T2JqKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICgodGhpcyA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50T2JqLnRhcmdldCA9PT0gZWxlbWVudHNbaV0pICYmIGV2ZW50T2JqLnNlbGVjdG9yID09PSBzZWxlY3RvciAmJiBldmVudE9iai5jYWxsYmFjayA9PT0gY2FsbGJhY2spIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9KTsKICAgIH07CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKCgogIC8qKgogICAqIEBjb25zdHJ1Y3RvcgogICAqIFByb2Nlc3NlcyAnYXJyaXZlJyBldmVudHMKICAgKi8KICB2YXIgQXJyaXZlRXZlbnRzID0gZnVuY3Rpb24oKSB7CiAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yICdhcnJpdmUnIGV2ZW50CiAgICB2YXIgYXJyaXZlRGVmYXVsdE9wdGlvbnMgPSB7CiAgICAgIGZpcmVPbkF0dHJpYnV0ZXNNb2RpZmljYXRpb246IGZhbHNlLAogICAgICBvbmNlT25seTogZmFsc2UsCiAgICAgIGV4aXN0aW5nOiBmYWxzZQogICAgfTsKCiAgICBmdW5jdGlvbiBnZXRBcnJpdmVPYnNlcnZlckNvbmZpZyhvcHRpb25zKSB7CiAgICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgYXR0cmlidXRlczogZmFsc2UsCiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICAgIHN1YnRyZWU6IHRydWUKICAgICAgfTsKCiAgICAgIGlmIChvcHRpb25zLmZpcmVPbkF0dHJpYnV0ZXNNb2RpZmljYXRpb24pIHsKICAgICAgICBjb25maWcuYXR0cmlidXRlcyA9IHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb25maWc7CiAgICB9CgogICAgZnVuY3Rpb24gb25BcnJpdmVNdXRhdGlvbihtdXRhdGlvbnMsIHJlZ2lzdHJhdGlvbkRhdGEpIHsKICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24oIG11dGF0aW9uICkgewogICAgICAgIHZhciBuZXdOb2RlcyAgICA9IG11dGF0aW9uLmFkZGVkTm9kZXMsCiAgICAgICAgICAgIHRhcmdldE5vZGUgPSBtdXRhdGlvbi50YXJnZXQsCiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQgPSBbXSwKICAgICAgICAgICAgbm9kZTsKCiAgICAgICAgLy8gSWYgbmV3IG5vZGVzIGFyZSBhZGRlZAogICAgICAgIGlmKCBuZXdOb2RlcyAhPT0gbnVsbCAmJiBuZXdOb2Rlcy5sZW5ndGggPiAwICkgewogICAgICAgICAgdXRpbHMuY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHkobmV3Tm9kZXMsIHJlZ2lzdHJhdGlvbkRhdGEsIG5vZGVNYXRjaEZ1bmMsIGNhbGxiYWNrc1RvQmVDYWxsZWQpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChtdXRhdGlvbi50eXBlID09PSAiYXR0cmlidXRlcyIpIHsKICAgICAgICAgIGlmIChub2RlTWF0Y2hGdW5jKHRhcmdldE5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEsIGNhbGxiYWNrc1RvQmVDYWxsZWQpKSB7CiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQucHVzaCh7IGNhbGxiYWNrOiByZWdpc3RyYXRpb25EYXRhLmNhbGxiYWNrLCBlbGVtOiB0YXJnZXROb2RlIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdXRpbHMuY2FsbENhbGxiYWNrcyhjYWxsYmFja3NUb0JlQ2FsbGVkLCByZWdpc3RyYXRpb25EYXRhKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gbm9kZU1hdGNoRnVuYyhub2RlLCByZWdpc3RyYXRpb25EYXRhLCBjYWxsYmFja3NUb0JlQ2FsbGVkKSB7CiAgICAgIC8vIGNoZWNrIGEgc2luZ2xlIG5vZGUgdG8gc2VlIGlmIGl0IG1hdGNoZXMgdGhlIHNlbGVjdG9yCiAgICAgIGlmICh1dGlscy5tYXRjaGVzU2VsZWN0b3Iobm9kZSwgcmVnaXN0cmF0aW9uRGF0YS5zZWxlY3RvcikpIHsKICAgICAgICBpZihub2RlLl9pZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBub2RlLl9pZCA9IGFycml2ZVVuaXF1ZUlkKys7CiAgICAgICAgfQogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYXJyaXZlIGV2ZW50IGlzIG5vdCBhbHJlYWR5IGZpcmVkIGZvciB0aGUgZWxlbWVudAogICAgICAgIGlmIChyZWdpc3RyYXRpb25EYXRhLmZpcmVkRWxlbXMuaW5kZXhPZihub2RlLl9pZCkgPT0gLTEpIHsKICAgICAgICAgIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5wdXNoKG5vZGUuX2lkKTsKCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBhcnJpdmVFdmVudHMgPSBuZXcgTXV0YXRpb25FdmVudHMoZ2V0QXJyaXZlT2JzZXJ2ZXJDb25maWcsIG9uQXJyaXZlTXV0YXRpb24pOwoKICAgIHZhciBtdXRhdGlvbkJpbmRFdmVudCA9IGFycml2ZUV2ZW50cy5iaW5kRXZlbnQ7CgogICAgLy8gb3ZlcnJpZGUgYmluZEV2ZW50IGZ1bmN0aW9uCiAgICBhcnJpdmVFdmVudHMuYmluZEV2ZW50ID0gZnVuY3Rpb24oc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAidW5kZWZpbmVkIikgewogICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0gYXJyaXZlRGVmYXVsdE9wdGlvbnM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3B0aW9ucyA9IHV0aWxzLm1lcmdlQXJyYXlzKGFycml2ZURlZmF1bHRPcHRpb25zLCBvcHRpb25zKTsKICAgICAgfQoKICAgICAgdmFyIGVsZW1lbnRzID0gdXRpbHMudG9FbGVtZW50c0FycmF5KHRoaXMpOwoKICAgICAgaWYgKG9wdGlvbnMuZXhpc3RpbmcpIHsKICAgICAgICB2YXIgZXhpc3RpbmcgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgdmFyIG5vZGVzID0gZWxlbWVudHNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5vZGVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgIGV4aXN0aW5nLnB1c2goeyBjYWxsYmFjazogY2FsbGJhY2ssIGVsZW06IG5vZGVzW2pdIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gbm8gbmVlZCB0byBiaW5kIGV2ZW50IGlmIHRoZSBjYWxsYmFjayBoYXMgdG8gYmUgZmlyZWQgb25seSBvbmNlIGFuZCB3ZSBoYXZlIGFscmVhZHkgZm91bmQgdGhlIGVsZW1lbnQKICAgICAgICBpZiAob3B0aW9ucy5vbmNlT25seSAmJiBleGlzdGluZy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKGV4aXN0aW5nWzBdLmVsZW0sIGV4aXN0aW5nWzBdLmVsZW0pOwogICAgICAgIH0KCiAgICAgICAgc2V0VGltZW91dCh1dGlscy5jYWxsQ2FsbGJhY2tzLCAxLCBleGlzdGluZyk7CiAgICAgIH0KCiAgICAgIG11dGF0aW9uQmluZEV2ZW50LmNhbGwodGhpcywgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgIH07CgogICAgcmV0dXJuIGFycml2ZUV2ZW50czsKICB9OwoKCiAgLyoqCiAgICogQGNvbnN0cnVjdG9yCiAgICogUHJvY2Vzc2VzICdsZWF2ZScgZXZlbnRzCiAgICovCiAgdmFyIExlYXZlRXZlbnRzID0gZnVuY3Rpb24oKSB7CiAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yICdsZWF2ZScgZXZlbnQKICAgIHZhciBsZWF2ZURlZmF1bHRPcHRpb25zID0ge307CgogICAgZnVuY3Rpb24gZ2V0TGVhdmVPYnNlcnZlckNvbmZpZygpIHsKICAgICAgdmFyIGNvbmZpZyA9IHsKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgc3VidHJlZTogdHJ1ZQogICAgICB9OwoKICAgICAgcmV0dXJuIGNvbmZpZzsKICAgIH0KCiAgICBmdW5jdGlvbiBvbkxlYXZlTXV0YXRpb24obXV0YXRpb25zLCByZWdpc3RyYXRpb25EYXRhKSB7CiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKCBtdXRhdGlvbiApIHsKICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzICA9IG11dGF0aW9uLnJlbW92ZWROb2RlcywKICAgICAgICAgICAgY2FsbGJhY2tzVG9CZUNhbGxlZCA9IFtdOwoKICAgICAgICBpZiggcmVtb3ZlZE5vZGVzICE9PSBudWxsICYmIHJlbW92ZWROb2Rlcy5sZW5ndGggPiAwICkgewogICAgICAgICAgdXRpbHMuY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHkocmVtb3ZlZE5vZGVzLCByZWdpc3RyYXRpb25EYXRhLCBub2RlTWF0Y2hGdW5jLCBjYWxsYmFja3NUb0JlQ2FsbGVkKTsKICAgICAgICB9CgogICAgICAgIHV0aWxzLmNhbGxDYWxsYmFja3MoY2FsbGJhY2tzVG9CZUNhbGxlZCwgcmVnaXN0cmF0aW9uRGF0YSk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIG5vZGVNYXRjaEZ1bmMobm9kZSwgcmVnaXN0cmF0aW9uRGF0YSkgewogICAgICByZXR1cm4gdXRpbHMubWF0Y2hlc1NlbGVjdG9yKG5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEuc2VsZWN0b3IpOwogICAgfQoKICAgIGxlYXZlRXZlbnRzID0gbmV3IE11dGF0aW9uRXZlbnRzKGdldExlYXZlT2JzZXJ2ZXJDb25maWcsIG9uTGVhdmVNdXRhdGlvbik7CgogICAgdmFyIG11dGF0aW9uQmluZEV2ZW50ID0gbGVhdmVFdmVudHMuYmluZEV2ZW50OwoKICAgIC8vIG92ZXJyaWRlIGJpbmRFdmVudCBmdW5jdGlvbgogICAgbGVhdmVFdmVudHMuYmluZEV2ZW50ID0gZnVuY3Rpb24oc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAidW5kZWZpbmVkIikgewogICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0gbGVhdmVEZWZhdWx0T3B0aW9uczsKICAgICAgfSBlbHNlIHsKICAgICAgICBvcHRpb25zID0gdXRpbHMubWVyZ2VBcnJheXMobGVhdmVEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIG11dGF0aW9uQmluZEV2ZW50LmNhbGwodGhpcywgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgIH07CgogICAgcmV0dXJuIGxlYXZlRXZlbnRzOwogIH07CgoKICB2YXIgYXJyaXZlRXZlbnRzID0gbmV3IEFycml2ZUV2ZW50cygpLAogICAgICBsZWF2ZUV2ZW50cyAgPSBuZXcgTGVhdmVFdmVudHMoKTsKCiAgZnVuY3Rpb24gZXhwb3NlVW5iaW5kQXBpKGV2ZW50T2JqLCBleHBvc2VUbywgZnVuY05hbWUpIHsKICAgIC8vIGV4cG9zZSB1bmJpbmQgZnVuY3Rpb24gd2l0aCBmdW5jdGlvbiBvdmVycmlkaW5nCiAgICB1dGlscy5hZGRNZXRob2QoZXhwb3NlVG8sIGZ1bmNOYW1lLCBldmVudE9iai51bmJpbmRFdmVudCk7CiAgICB1dGlscy5hZGRNZXRob2QoZXhwb3NlVG8sIGZ1bmNOYW1lLCBldmVudE9iai51bmJpbmRFdmVudFdpdGhTZWxlY3Rvck9yQ2FsbGJhY2spOwogICAgdXRpbHMuYWRkTWV0aG9kKGV4cG9zZVRvLCBmdW5jTmFtZSwgZXZlbnRPYmoudW5iaW5kRXZlbnRXaXRoU2VsZWN0b3JBbmRDYWxsYmFjayk7CiAgfQoKICAvKioqIGV4cG9zZSBBUElzICoqKi8KICBmdW5jdGlvbiBleHBvc2VBcGkoZXhwb3NlVG8pIHsKICAgIGV4cG9zZVRvLmFycml2ZSA9IGFycml2ZUV2ZW50cy5iaW5kRXZlbnQ7CiAgICBleHBvc2VVbmJpbmRBcGkoYXJyaXZlRXZlbnRzLCBleHBvc2VUbywgInVuYmluZEFycml2ZSIpOwoKICAgIGV4cG9zZVRvLmxlYXZlID0gbGVhdmVFdmVudHMuYmluZEV2ZW50OwogICAgZXhwb3NlVW5iaW5kQXBpKGxlYXZlRXZlbnRzLCBleHBvc2VUbywgInVuYmluZExlYXZlIik7CiAgfQoKICBpZiAoJCkgewogICAgZXhwb3NlQXBpKCQuZm4pOwogIH0KICBleHBvc2VBcGkoSFRNTEVsZW1lbnQucHJvdG90eXBlKTsKICBleHBvc2VBcGkoTm9kZUxpc3QucHJvdG90eXBlKTsKICBleHBvc2VBcGkoSFRNTENvbGxlY3Rpb24ucHJvdG90eXBlKTsKICBleHBvc2VBcGkoSFRNTERvY3VtZW50LnByb3RvdHlwZSk7CiAgZXhwb3NlQXBpKFdpbmRvdy5wcm90b3R5cGUpOwoKICB2YXIgQXJyaXZlID0ge307CiAgLy8gZXhwb3NlIGZ1bmN0aW9ucyB0byB1bmJpbmQgYWxsIGFycml2ZS9sZWF2ZSBldmVudHMKICBleHBvc2VVbmJpbmRBcGkoYXJyaXZlRXZlbnRzLCBBcnJpdmUsICJ1bmJpbmRBbGxBcnJpdmUiKTsKICBleHBvc2VVbmJpbmRBcGkobGVhdmVFdmVudHMsIEFycml2ZSwgInVuYmluZEFsbExlYXZlIik7CgogIHJldHVybiBBcnJpdmU7Cgp9KSh3aW5kb3csIHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGpRdWVyeSwgdW5kZWZpbmVkKTs="}]},{"name":"IXL","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.ixl.com/awards/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685019813587,"data":{}},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/391448-ixl/code/IXL.user.js","uuid":"05321cc7-dbdd-4f0b-9fc2-dd85395a66bf","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgSVhMCi8vIEBuYW1lc3BhY2UgVmlvbGVudG1vbmtleSBTY3JpcHRzCi8vIEBtYXRjaCBodHRwczovL3d3dy5peGwuY29tL2F3YXJkcy8qCi8vIEBncmFudCBub25lCi8vIEBkZXNjcmlwdGlvbiBJdCBhZGRzIGNvbmZldHRpIHRvIHRoZSBpeGwgYXdhcmRzIHNjcmVlbiEKLy8gQGljb24gaHR0cHM6Ly93d3cuaXhsLmNvbS9peGwtZmF2aWNvbi5wbmcKLy8gQHZlcnNpb24gMS4yCi8vIEBhdXRob3IgQnJ5YW50IFJvYmluc29uCi8vID09L1VzZXJTY3JpcHQ9PQooZnVuY3Rpb24oKSB7CiAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICd0ZXh0JzogIiciICwKICAgICAgICAnc2l6ZSc6IDE1MCwKICAgICAgICAnd2VpZ2h0JzogODAwLAogICAgICAgICdzcGVlZCc6IDI1MDAKICAgIH0KCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7CiAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9ICdmbG9hdGluZ0VsZW1lbnRzJwogICAgICAgIGVsZW1lbnQuc3R5bGUgPSBgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgbWFyZ2luOiBhdXRvOyBwb2ludGVyLWV2ZW50czogbm9uZTsgdXNlci1zZWxlY3Q6IG5vbmU7IGZvbnQtd2VpZ2h0OiAke29wdGlvbnMud2VpZ2h0fTsgZm9udC1zaXplOiAke29wdGlvbnMuc2l6ZX1weDsgcG9zaXRpb246IGFic29sdXRlOyB6LWluZGV4OiAyMTQ3NDgzNjQ3OyB0cmFuc2l0aW9uOiBhbGwgJHtvcHRpb25zLnNwZWVkLzEwMDB9cyBsaW5lYXI7IHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7IHRleHQtYWxpZ246IGNlbnRlcjtgOwogICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBvcHRpb25zLnRleHQ7CgogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CiAgICB9CgogICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgIGxldCBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Zsb2F0aW5nRWxlbWVudHMnKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGVsZW1lbnRzW2ldLnN0eWxlLmNvbG9yID0gY29sb3IoKTsKICAgICAgICAgICAgZWxlbWVudHNbaV0uc3R5bGUub3BhY2l0eSA9IE1hdGgucmFuZG9tKCkgKyAuMTsKICAgICAgICAgICAgZWxlbWVudHNbaV0uc3R5bGUudHJhbnNmb3JtID0gYHJvdGF0ZSgke3JhbmRvbSgwLDM2MCl9ZGVnKSB0cmFuc2xhdGUoJHtyYW5kb20oLTEwMDAsMTAwMCl9cHgsICR7cmFuZG9tKC01MDAsNTAwKX1weCkgdHJhbnNsYXRlM2QoJHtyYW5kb20oMCwyMDApfXB4LCR7cmFuZG9tKDAsMjAwKX1weCwke3JhbmRvbSgwLDIwMCl9cHgpIHJvdGF0ZVgoJHtyYW5kb20oMCwzNjApfWRlZykgcm90YXRlWSgke3JhbmRvbSgwLDM2MCl9ZGVnKSByb3RhdGVaKCR7cmFuZG9tKDAsMzYwKX1kZWcpYDsKICAgICAgICB9CiAgICB9LCBvcHRpb25zLnNwZWVkKTsKCiAgICBmdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHsgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTsgfQoKICAgIGZ1bmN0aW9uIGNvbG9yKCkgeyByZXR1cm4gWydyZWQnLCAnb3JhbmdlJywgJ3llbGxvdycsICdncmVlbicsICdibHVlJywgJ3B1cnBsZScsICdwaW5rJ11bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNyldOyB9Cn0pKCk7"},{"name":"Change Google Classroom User","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://classroom.google.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685022176487,"data":{}},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/372962-change-google-classroom-user/code/Change%20Google%20Classroom%20User.user.js","uuid":"e2a0bb73-f342-4c3f-9163-f25e44102115","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIENoYW5nZSBHb29nbGUgQ2xhc3Nyb29tIFVzZXIKLy8gQG5hbWVzcGFjZSAgIENoYW5nZSBHb29nbGUgQ2xhc3Nyb29tIFVzZXIgYnkgQzRpbGxpbgovLyBAZGVzY3JpcHRpb24gU3dpdGNoZXMgYmV0d2VlbiAvdS8wICYgL3UvMSBvbiBnb29nbGUgY2xhc3Nyb29tIGF1dG9tYXRpY2FsbHkuCi8vIEBtYXRjaCAgICAgICBodHRwczovL2NsYXNzcm9vbS5nb29nbGUuY29tLyoKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LWlkbGUKLy8gQGdyYW50ICAgICAgIG5vbmUKLy8gQGF1dGhvciAgICAgIEM0aWxsaW4gPGhpQGVtcmlrLm9yZz4KLy8gQG91anM6YXV0aG9yIEM0aWxsaW4KLy8gQHZlcnNpb24gICAgIDEuMi4yCi8vIEBob21lcGFnZVVSTCBodHRwczovL2dpdGh1Yi5jb20vQzRpbGxpbi9Vc2Vyc2NyaXB0cy90cmVlL21hc3Rlci9DaGFuZ2UtR29vZ2xlLUNsYXNzcm9vbS1Vc2VyCi8vIEBsaWNlbnNlICAgICBNSVQ7IGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUCi8vIEBjb3B5cmlnaHQgICAyMDE4LTIwMjEsIEM0aWxsaW4gKGh0dHBzOi8vZ2l0aHViLmNvbS9DNGlsbGluKQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICBsZXQgcmVmcmVzaCA9IHNldEludGVydmFsKCgpID0+IHsKICAgIGlmICgoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiTHFyMmUiKS5sZW5ndGggIT0gMCkgJiYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5sZW5ndGggPCA3KSkgewogICAgICBzd2l0Y2hVc2VyKCkKICAgIH0KICAgIGlmICgoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgidENENU1jIikubGVuZ3RoICE9IDApICYmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUubGVuZ3RoID4gNykpIHsKICAgICAgc3dpdGNoVXNlcigpCiAgICB9CiAgfSwgMzUwKQogIAogIGZ1bmN0aW9uIHN3aXRjaFVzZXIoKSB7CiAgICBjbGVhckludGVydmFsKHJlZnJlc2gpCiAgICBsZXQgdGltZSAgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2NzdS1zd2l0Y2hlcycpCiAgICBsZXQgbm93ID0gRGF0ZS5ub3coKQogICAgaWYgKG5vdy10aW1lID4gMTUwMDAgKSB7CiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdnY3N1LXN3aXRjaGVzJywgbm93KQogICAgICBsZXQgdXNlcgogICAgICBpZiAod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cmluZygzLDQpID09IDApIHsKICAgICAgICB1c2VyID0gMQogICAgICB9IGVsc2UgewogICAgICAgIHVzZXIgPSAwCiAgICAgIH0KICAgICAgbGV0IG5ld2xpbmsgPSAiaHR0cHM6Ly9jbGFzc3Jvb20uZ29vZ2xlLmNvbS91LyIrIHVzZXIgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDQpICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoCiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKG5ld2xpbmspCiAgICB9CiAgfQp9KSgp"},{"name":"ChatGPT Search","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["chat.openai.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://*.google.com/search*","https://*.google.ad/search*","https://*.google.ae/search*","https://*.google.com.af/search*","https://*.google.com.ag/search*","https://*.google.com.ai/search*","https://*.google.al/search*","https://*.google.am/search*","https://*.google.co.ao/search*","https://*.google.com.ar/search*","https://*.google.as/search*","https://*.google.at/search*","https://*.google.com.au/search*","https://*.google.az/search*","https://*.google.ba/search*","https://*.google.com.bd/search*","https://*.google.be/search*","https://*.google.bf/search*","https://*.google.bg/search*","https://*.google.com.bh/search*","https://*.google.bi/search*","https://*.google.bj/search*","https://*.google.com.bn/search*","https://*.google.com.bo/search*","https://*.google.com.br/search*","https://*.google.bs/search*","https://*.google.bt/search*","https://*.google.co.bw/search*","https://*.google.by/search*","https://*.google.com.bz/search*","https://*.google.ca/search*","https://*.google.cd/search*","https://*.google.cf/search*","https://*.google.cg/search*","https://*.google.ch/search*","https://*.google.ci/search*","https://*.google.co.ck/search*","https://*.google.cl/search*","https://*.google.cm/search*","https://*.google.cn/search*","https://*.google.com.co/search*","https://*.google.co.cr/search*","https://*.google.com.cu/search*","https://*.google.cv/search*","https://*.google.com.cy/search*","https://*.google.cz/search*","https://*.google.de/search*","https://*.google.dj/search*","https://*.google.dk/search*","https://*.google.dm/search*","https://*.google.com.do/search*","https://*.google.dz/search*","https://*.google.com.ec/search*","https://*.google.ee/search*","https://*.google.com.eg/search*","https://*.google.es/search*","https://*.google.com.et/search*","https://*.google.fi/search*","https://*.google.com.fj/search*","https://*.google.fm/search*","https://*.google.fr/search*","https://*.google.ga/search*","https://*.google.ge/search*","https://*.google.gg/search*","https://*.google.com.gh/search*","https://*.google.com.gi/search*","https://*.google.gl/search*","https://*.google.gm/search*","https://*.google.gr/search*","https://*.google.com.gt/search*","https://*.google.gy/search*","https://*.google.com.hk/search*","https://*.google.hn/search*","https://*.google.hr/search*","https://*.google.ht/search*","https://*.google.hu/search*","https://*.google.co.id/search*","https://*.google.ie/search*","https://*.google.co.il/search*","https://*.google.im/search*","https://*.google.co.in/search*","https://*.google.iq/search*","https://*.google.is/search*","https://*.google.it/search*","https://*.google.je/search*","https://*.google.com.jm/search*","https://*.google.jo/search*","https://*.google.co.jp/search*","https://*.google.co.ke/search*","https://*.google.com.kh/search*","https://*.google.ki/search*","https://*.google.kg/search*","https://*.google.co.kr/search*","https://*.google.com.kw/search*","https://*.google.kz/search*","https://*.google.la/search*","https://*.google.com.lb/search*","https://*.google.li/search*","https://*.google.lk/search*","https://*.google.co.ls/search*","https://*.google.lt/search*","https://*.google.lu/search*","https://*.google.lv/search*","https://*.google.com.ly/search*","https://*.google.co.ma/search*","https://*.google.md/search*","https://*.google.me/search*","https://*.google.mg/search*","https://*.google.mk/search*","https://*.google.ml/search*","https://*.google.com.mm/search*","https://*.google.mn/search*","https://*.google.ms/search*","https://*.google.com.mt/search*","https://*.google.mu/search*","https://*.google.mv/search*","https://*.google.mw/search*","https://*.google.com.mx/search*","https://*.google.com.my/search*","https://*.google.co.mz/search*","https://*.google.com.na/search*","https://*.google.com.ng/search*","https://*.google.com.ni/search*","https://*.google.ne/search*","https://*.google.nl/search*","https://*.google.no/search*","https://*.google.com.np/search*","https://*.google.nr/search*","https://*.google.nu/search*","https://*.google.co.nz/search*","https://*.google.com.om/search*","https://*.google.com.pa/search*","https://*.google.com.pe/search*","https://*.google.com.pg/search*","https://*.google.com.ph/search*","https://*.google.com.pk/search*","https://*.google.pl/search*","https://*.google.pn/search*","https://*.google.com.pr/search*","https://*.google.ps/search*","https://*.google.pt/search*","https://*.google.com.py/search*","https://*.google.com.qa/search*","https://*.google.ro/search*","https://*.google.ru/search*","https://*.google.rw/search*","https://*.google.com.sa/search*","https://*.google.com.sb/search*","https://*.google.sc/search*","https://*.google.se/search*","https://*.google.com.sg/search*","https://*.google.sh/search*","https://*.google.si/search*","https://*.google.sk/search*","https://*.google.com.sl/search*","https://*.google.sn/search*","https://*.google.so/search*","https://*.google.sm/search*","https://*.google.sr/search*","https://*.google.st/search*","https://*.google.com.sv/search*","https://*.google.td/search*","https://*.google.tg/search*","https://*.google.co.th/search*","https://*.google.com.tj/search*","https://*.google.tl/search*","https://*.google.tm/search*","https://*.google.tn/search*","https://*.google.to/search*","https://*.google.com.tr/search*","https://*.google.tt/search*","https://*.google.com.tw/search*","https://*.google.co.tz/search*","https://*.google.com.ua/search*","https://*.google.co.ug/search*","https://*.google.co.uk/search*","https://*.google.com.uy/search*","https://*.google.co.uz/search*","https://*.google.com.vc/search*","https://*.google.co.ve/search*","https://*.google.vg/search*","https://*.google.co.vi/search*","https://*.google.com.vn/search*","https://*.google.vu/search*","https://*.google.ws/search*","https://*.google.rs/search*","https://*.google.co.za/search*","https://*.google.co.zm/search*","https://*.google.co.zw/search*","https://*.google.cat/search*","https://www.bing.com/search*","https://cn.bing.com/search*","https://www.baidu.com/s*","https://duckduckgo.com/*","https://www.deepl.com/translator*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685446880337,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/456077-chatgpt-search/code/ChatGPT%20Search.user.js","uuid":"30b472d8-6428-4852-8361-ea417efaefd2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgICBDaGF0R1BUIFNlYXJjaAovLyBAbmFtZTp6aC1DTiAgICAgICAgIENoYXRHUFQg5pCc57SiCi8vIEBuYW1lOnpoLVNHICAgICAgICAgQ2hhdEdQVCDmkJzntKIKLy8gQG5hbWU6emgtVFcgICAgICAgICBDaGF0R1BUIOaQnOe0ogovLyBAbmFtZTp6aC1ISyAgICAgICAgIENoYXRHUFQg5pCc57SiCi8vIEBuYW1lc3BhY2UgICAgICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQ1NjA3NwovLyBAdmVyc2lvbiAgICAgICAgICAgIDAuOC4wCi8vIEBhdXRob3IgICAgICAgICAgICAgWmhlbmcgQmFuZy1CbyhodHRwczovL2dpdGh1Yi5jb20vemhlbmdiYW5nYm8pCi8vIEBkZXNjcmlwdGlvbiAgICAgICAgQ2hhdEdQVCBhbnN3ZXJzIGRpc3BsYXllZCBpbiBzaWRlYmFyIGFmdGVyIHNlYXJjaCAoR29vZ2xlLCBCaW5nLCBCYWlkdSwgRHVja0R1Y2tHbyBhbmQgRGVlcEwpCi8vIEBkZXNjcmlwdGlvbjp6aC1DTiAg5L6n5qCP5pi+56S6IENoYXRHUFQg5Zue562U77yIR29vZ2xl44CBQmluZ+OAgeeZvuW6puOAgUR1Y2tEdWNrR2/lkoxEZWVwTO+8iQovLyBAZGVzY3JpcHRpb246emgtU0cgIOS+p+agj+aYvuekuiBDaGF0R1BUIOWbnuetlO+8iEdvb2dsZeOAgUJpbmfjgIHnmb7luqbjgIFEdWNrRHVja0dv5ZKMRGVlcEzvvIkKLy8gQGRlc2NyaXB0aW9uOnpoLVRXICDlgbTmrITpoa/npLogQ2hhdEdQVCDlm57nrZTvvIhHb29nbGXjgIFCaW5n44CB55m+5bqm44CBRHVja0R1Y2tHb+WSjERlZXBM77yJCi8vIEBkZXNjcmlwdGlvbjp6aC1ISyAg5YG05qyE6aGv56S6IENoYXRHUFQg5Zue562U77yIR29vZ2xl44CBQmluZ+OAgeeZvuW6puOAgUR1Y2tEdWNrR2/lkoxEZWVwTO+8iQovLyBAbGljZW5zZSAgICAgICAgICAgIE1JVAovLyBAaWNvbiAgICAgICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS96aGVuZ2Jhbmdiby9vc3MvcmF3L21haW4vbG9nby9jaGF0LWdwdC11c2Vyc2NyaXB0LnBuZwovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmFkL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmFlL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5hZi9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uYWcvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmFpL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmFsL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmFtL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLmFvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5hci9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5hcy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5hdC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uYXUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuYXovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuYmEvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmJkL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmJlL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmJmL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmJnL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5iaC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5iaS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5iai9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uYm4vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmJvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5ici9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5icy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5idC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jby5idy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5ieS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uYnovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2Evc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2Qvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2Yvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2cvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2gvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2kvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28uY2svc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY2wvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY20vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY24vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmNvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLmNyL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5jdS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jdi9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uY3kvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY3ovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuZGUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuZGovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuZGsvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuZG0vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmRvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmR6L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5lYy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5lZS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uZWcvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuZXMvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmV0L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmZpL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5mai9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5mbS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5mci9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5nYS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5nZS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5nZy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uZ2gvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmdpL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmdsL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmdtL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmdyL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5ndC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5neS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uaGsvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaG4vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaHIvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaHQvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaHUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28uaWQvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaWUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28uaWwvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaW0vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28uaW4vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaXEvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaXMvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuaXQvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuamUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmptL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmpvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLmpwL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLmtlL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5raC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5raS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5rZy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jby5rci9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ua3cvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUua3ovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUubGEvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLmxiL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmxpL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmxrL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLmxzL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmx0L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmx1L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmx2L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5seS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jby5tYS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5tZC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5tZS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5tZy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5tay9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5tbC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ubW0vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUubW4vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUubXMvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLm10L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLm11L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLm12L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLm13L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5teC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ubXkvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28ubXovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLm5hL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5uZy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ubmkvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUubmUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUubmwvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUubm8vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLm5wL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLm5yL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLm51L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLm56L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5vbS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ucGEvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnBlL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5wZy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ucGgvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnBrL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnBsL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnBuL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5wci9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5wcy9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5wdC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20ucHkvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnFhL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnJvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnJ1L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnJ3L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5zYS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uc2Ivc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuc2Mvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuc2Uvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnNnL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnNoL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnNpL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnNrL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS5zbC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5zbi9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5zby9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5zbS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5zci9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5zdC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20uc3Yvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUudGQvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUudGcvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28udGgvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnRqL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnRsL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnRtL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnRuL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnRvL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS50ci9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS50dC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20udHcvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28udHovc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnVhL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLnVnL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLnVrL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvbS51eS9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jby51ei9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly8qLmdvb2dsZS5jb20udmMvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28udmUvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUudmcvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY28udmkvc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vKi5nb29nbGUuY29tLnZuL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnZ1L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLndzL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLnJzL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLnphL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLnptL3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNvLnp3L3NlYXJjaCoKLy8gQG1hdGNoICAgICAgICAgICAgICBodHRwczovLyouZ29vZ2xlLmNhdC9zZWFyY2gqCi8vIEBtYXRjaCAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuYmluZy5jb20vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vY24uYmluZy5jb20vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJhaWR1LmNvbS9zKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vZHVja2R1Y2tnby5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmRlZXBsLmNvbS90cmFuc2xhdG9yKgovLyBAY29ubmVjdCAgICAgICAgICAgIGNoYXQub3BlbmFpLmNvbQovLyBAZ3JhbnQgICAgICAgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUKLy8gQGdyYW50ICAgICAgICAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgICAgICAgIEdNX2luZm8KLy8gQGdyYW50ICAgICAgICAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kCi8vIEBncmFudCAgICAgICAgICAgICAgR01fc2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICAgICAgICBHTV91bnJlZ2lzdGVyTWVudUNvbW1hbmQKLy8gQGdyYW50ICAgICAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdAovLyA9PS9Vc2VyU2NyaXB0PT0KCihlPT57Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpO3QuZGF0YXNldC5zb3VyY2U9InZpdGUtcGx1Z2luLW1vbmtleSIsdC5pbm5lclRleHQ9ZSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHQpfSkoIi5jaGF0LWdwdC1jb250YWluZXJ7bWF4LXdpZHRoOjM2OXB4O21hcmdpbi1ib3R0b206MzBweDtib3JkZXItcmFkaXVzOjhweDtib3JkZXI6MXB4IHNvbGlkICNkYWRjZTA7cGFkZGluZzoxNXB4O2ZsZXgtYmFzaXM6MDtmbGV4LWdyb3c6MTt3b3JkLXdyYXA6YnJlYWstd29yZDt3aGl0ZS1zcGFjZTpwcmUtd3JhcH0uY2hhdC1ncHQtY29udGFpbmVyIHB7bWFyZ2luOjB9LmNoYXQtZ3B0LWNvbnRhaW5lciAucHJlZml4e2ZvbnQtd2VpZ2h0OjcwMH0uY2hhdC1ncHQtY29udGFpbmVyIC5sb2FkaW5ne2NvbG9yOiNiNmI4YmE7YW5pbWF0aW9uOnB1bHNlIDJzIGN1YmljLWJlemllciguNCwwLC42LDEpIGluZmluaXRlfUBrZXlmcmFtZXMgcHVsc2V7MCUsdG97b3BhY2l0eToxfTUwJXtvcGFjaXR5Oi41fX0uY2hhdC1ncHQtY29udGFpbmVyLnNpZGViYXItZnJlZXttYXJnaW4tbGVmdDo2MHB4O2hlaWdodDpmaXQtY29udGVudH0uY2hhdC1ncHQtY29udGFpbmVyIHByZXt3aGl0ZS1zcGFjZTpwcmUtd3JhcDttaW4td2lkdGg6MDttYXJnaW4tYm90dG9tOjA7bGluZS1oZWlnaHQ6MjBweH0uY2hhdC1ncHQtdHJhbnNsYXRlLWJ1dHRvbntib3JkZXItcmFkaXVzOjhweDtib3JkZXI6MXB4IHNvbGlkICNkYWRjZTA7cGFkZGluZzo1cHh9LmNoYXQtZ3B0LXRyYW5zbGF0ZS1idXR0b246aG92ZXJ7Y29sb3I6IzAwNjQ5NDt0cmFuc2l0aW9uOmNvbG9yIC4xcyBlYXNlLW91dH0uY2hhdC1ncHQtdHJhbnNsYXRlLWJ1dHRvbltkaXNhYmxlZF17Y29sb3I6I2VlZX0iKTsKCihmdW5jdGlvbigpIHsKICAidXNlIHN0cmljdCI7CiAgdmFyIG1vbmtleVdpbmRvdyA9IHdpbmRvdzsKICB2YXIgR01faW5mbyA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gbW9ua2V5V2luZG93LkdNX2luZm8pKCk7CiAgdmFyIEdNX3NldFZhbHVlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtb25rZXlXaW5kb3cuR01fc2V0VmFsdWUpKCk7CiAgdmFyIEdNX2RlbGV0ZVZhbHVlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtb25rZXlXaW5kb3cuR01fZGVsZXRlVmFsdWUpKCk7CiAgdmFyIEdNX2FkZFN0eWxlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtb25rZXlXaW5kb3cuR01fYWRkU3R5bGUpKCk7CiAgdmFyIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IG1vbmtleVdpbmRvdy5HTV9yZWdpc3Rlck1lbnVDb21tYW5kKSgpOwogIHZhciBHTV91bnJlZ2lzdGVyTWVudUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IG1vbmtleVdpbmRvdy5HTV91bnJlZ2lzdGVyTWVudUNvbW1hbmQpKCk7CiAgdmFyIEdNX3htbGh0dHBSZXF1ZXN0ID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtb25rZXlXaW5kb3cuR01feG1saHR0cFJlcXVlc3QpKCk7CiAgdmFyIEdNX2dldFZhbHVlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtb25rZXlXaW5kb3cuR01fZ2V0VmFsdWUpKCk7CiAgZnVuY3Rpb24gZ2V0VXNlcnNjcmlwdE1hbmFnZXIoKSB7CiAgICB0cnkgewogICAgICBjb25zdCB1c2Vyc2NyaXB0TWFuYWdlciA9IEdNX2luZm8uc2NyaXB0SGFuZGxlcjsKICAgICAgcmV0dXJuIHVzZXJzY3JpcHRNYW5hZ2VyOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgcmV0dXJuICJvdGhlciI7CiAgICB9CiAgfQogIGZ1bmN0aW9uIHV1aWR2NCgpIHsKICAgIHZhciBzID0gW107CiAgICB2YXIgaGV4RGlnaXRzID0gIjAxMjM0NTY3ODlhYmNkZWYiOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzNjsgaSsrKSB7CiAgICAgIHNbaV0gPSBoZXhEaWdpdHMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KSwgMSk7CiAgICB9CiAgICBzWzE0XSA9ICI0IjsKICAgIHNbMTldID0gaGV4RGlnaXRzLnN1YnN0cihzWzE5XSAmIDMgfCA4LCAxKTsKICAgIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSAiLSI7CiAgICB2YXIgdXVpZCA9IHMuam9pbigiIik7CiAgICByZXR1cm4gdXVpZDsKICB9CiAgY29uc3QgbGFuZyA9IG5hdmlnYXRvci5hcHBOYW1lID09ICJOZXRzY2FwZSIgPyBuYXZpZ2F0b3IubGFuZ3VhZ2UgOiBuYXZpZ2F0b3IudXNlckxhbmd1YWdlOwogIGxldCBjb25maWcgPSB7fTsKICBzd2l0Y2ggKGxhbmcpIHsKICAgIGNhc2UgInpoLUNOIjoKICAgIGNhc2UgInpoLVNHIjoKICAgICAgY29uZmlnID0gewogICAgICAgIHdhaXRpbmdSZXNwb25zZTogIuetieW+hSBDaGF0R1BUIOWTjeW6lC4uLiIsCiAgICAgICAgbG9naW46ICLor7flnKjku6XkuIvlnLDlnYDnmbvlvZXvvJoiLAogICAgICAgIHRvb01hbnlSZXF1ZXN0czogIjHlsI/ml7blhoXor7fmsYLlpKrlpJrjgILor7fnqI3lkI7lho3or5XjgIIiLAogICAgICAgIGNoZWNrQ2xvdWZsYXJlOiAi6K+36YCa6L+HIENsb3VkZmxhcmUg5a6J5YWo5qOA5p+l77yM5Zyw5Z2A5Li6IiwKICAgICAgICB1bmtub3dFcnJvcjogIuWTpu+8jOWPr+iDveaYr+S4qumUmeivr++8jOivt+ajgOafpeaIluaPkOS6pOWIsCIsCiAgICAgICAgbmV0d29ya0V4Y2VwdGlvbjogIue9kee7nOW8guW4uO+8jOivt+WIt+aWsOmhtemdouOAgiIsCiAgICAgICAgY29udGFpbmVyUG9zaXRpb246ICLlrrnlmajkvY3nva4gLSDkvqfpnaIoMSkv6aG26YOoKDApOiAiLAogICAgICAgIGNoYXRHUFRUcmFuc2xhdGU6ICJDaGF0R1BUIOe/u+ivkSIKICAgICAgfTsKICAgICAgYnJlYWs7CiAgICBjYXNlICJ6aC1UVyI6CiAgICBjYXNlICJ6aC1ISyI6CiAgICAgIGNvbmZpZyA9IHsKICAgICAgICB3YWl0aW5nUmVzcG9uc2U6ICLnrYnlvoUgQ2hhdEdQVCDlm57mh4kuLi4iLAogICAgICAgIGxvZ2luOiAi6KuL5Zyo5Lul5LiL5Zyw5Z2A55m76YyE77yaIiwKICAgICAgICB0b29NYW55UmVxdWVzdHM6ICIx5bCP5pmC5YWn6KuL5rGC5aSq5aSa44CC6KuL56iN5b6M5YaN6Kmm44CCIiwKICAgICAgICBjaGVja0Nsb3VmbGFyZTogIuiri+mAmumBjiBDbG91ZGZsYXJlIOWuieWFqOaqouafpe+8jOWcsOWdgOeCuiIsCiAgICAgICAgdW5rbm93RXJyb3I6ICLlk6bvvIzlj6/og73mmK/lgIvpjK/oqqTvvIzoq4vmqqLmn6XmiJbmj5DkuqTliLAiLAogICAgICAgIG5ldHdvcmtFeGNlcHRpb246ICLntrLot6/nlbDluLjvvIzoq4vliLfmlrDpoIHpnaLjgIIiLAogICAgICAgIGNvbnRhaW5lclBvc2l0aW9uOiAi5a655Zmo5L2N572uIC0g5YG06Z2iKDEpL+mggumDqCgwKToiLAogICAgICAgIGNoYXRHUFRUcmFuc2xhdGU6ICJDaGF0R1BUIOe/u+itryIKICAgICAgfTsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICBjb25maWcgPSB7CiAgICAgICAgd2FpdGluZ1Jlc3BvbnNlOiAiV2FpdGluZyBmb3IgQ2hhdEdQVCByZXNwb25zZS4uLiIsCiAgICAgICAgbG9naW46ICJQbGVhc2UgbG9naW4gYXQgIiwKICAgICAgICB0b29NYW55UmVxdWVzdHM6ICJUb28gbWFueSByZXF1ZXN0cyBpbiAxIGhvdXIuIFRyeSBhZ2FpbiBsYXRlci4iLAogICAgICAgIGNoZWNrQ2xvdWZsYXJlOiAiUGxlYXNlIHBhc3MgQ2xvdWRmbGFyZSBzZWN1cml0eSBjaGVjayBhdCAiLAogICAgICAgIHVua25vd0Vycm9yOiAiT29wcywgbWF5YmUgaXQgaXMgYSBidWcsIHBsZWFzZSBjaGVjayBvciBzdWJtaXQgIiwKICAgICAgICBuZXR3b3JrRXhjZXB0aW9uOiAiTmV0d29yayBleGNlcHRpb24sIHBsZWFzZSByZWZyZXNoIHRoZSBwYWdlLiIsCiAgICAgICAgY29udGFpbmVyUG9zaXRpb246ICJDb250YWluZXIgUG9zaXRpb24gLSBTaWRlKDEpL1RvcCgwKTogIiwKICAgICAgICBjaGF0R1BUVHJhbnNsYXRlOiAiQ2hhdEdQVCBUcmFuc2xhdGUiCiAgICAgIH07CiAgfQogIGZ1bmN0aW9uIGkxOG4obmFtZSwgcGFyYW0pIHsKICAgIHJldHVybiBjb25maWdbbmFtZV0gPyBjb25maWdbbmFtZV0ucmVwbGFjZSgiI3QjIiwgcGFyYW0pIDogbmFtZTsKICB9CiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgZnVuY3Rpb24gZ2V0Q29udGFpbmVyKCkgewogICAgcmV0dXJuIGNvbnRhaW5lcjsKICB9CiAgZnVuY3Rpb24gaW5pdENvbnRhaW5lcigpIHsKICAgIGNvbnN0IGNvbnRhaW5lcjIgPSBnZXRDb250YWluZXIoKTsKICAgIGNvbnRhaW5lcjIuY2xhc3NOYW1lID0gImNoYXQtZ3B0LWNvbnRhaW5lciI7CiAgICBjb250YWluZXIyLmlubmVySFRNTCA9IGA8cCBjbGFzcz0ibG9hZGluZyI+JHtpMThuKCJ3YWl0aW5nUmVzcG9uc2UiKX08L3A+YDsKICB9CiAgZnVuY3Rpb24gY29udGFpbmVyU2hvdyhhbnN3ZXIpIHsKICAgIGNvbnN0IGNvbnRhaW5lcjIgPSBnZXRDb250YWluZXIoKTsKICAgIGNvbnRhaW5lcjIuaW5uZXJIVE1MID0gJzxwPjxzcGFuIGNsYXNzPSJwcmVmaXgiPkNoYXRHUFQ8L3NwYW4+PHByZT48L3ByZT48L3A+JzsKICAgIGNvbnRhaW5lcjIucXVlcnlTZWxlY3RvcigicHJlIikudGV4dENvbnRlbnQgPSBhbnN3ZXI7CiAgfQogIGZ1bmN0aW9uIGNvbnRhaW5lckFsZXJ0KGh0bWxTdHIpIHsKICAgIGNvbnN0IGNvbnRhaW5lcjIgPSBnZXRDb250YWluZXIoKTsKICAgIGNvbnRhaW5lcjIuaW5uZXJIVE1MID0gaHRtbFN0cjsKICB9CiAgZnVuY3Rpb24gYWxlcnRMb2dpbigpIHsKICAgIGNvbnRhaW5lckFsZXJ0KGA8cD4ke2kxOG4oImxvZ2luIil9PGEgaHJlZj0iaHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vcmVmZXJyZXIiPmNoYXQub3BlbmFpLmNvbTwvYT48L3A+YCk7CiAgfQogIGZ1bmN0aW9uIGFsZXJ0QmxvY2tlZEJ5Q2xvdWRmbGFyZSgpIHsKICAgIGNvbnRhaW5lckFsZXJ0KGA8cD4ke2kxOG4oImNoZWNrQ2xvdWZsYXJlIil9PGEgaHJlZj0iaHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vcmVmZXJyZXIiPmNoYXQub3BlbmFpLmNvbTwvYT48L3A+YCk7CiAgfQogIGZ1bmN0aW9uIGFsZXJ0RnJlcXVlbnRSZXF1ZXN0cygpIHsKICAgIGNvbnRhaW5lckFsZXJ0KGA8cD4ke2kxOG4oInRvb01hbnlSZXF1ZXN0cyIpfTwvcD5gKTsKICB9CiAgZnVuY3Rpb24gaXNCbG9ja2VkYnlDbG91ZGZsYXJlKHJlc3ApIHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IGh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHJlc3AsICJ0ZXh0L2h0bWwiKTsKICAgICAgY29uc3QgdGl0bGUgPSBodG1sLnF1ZXJ5U2VsZWN0b3IoInRpdGxlIik7CiAgICAgIHJldHVybiB0aXRsZS5pbm5lclRleHQgPT09ICJKdXN0IGEgbW9tZW50Li4uIjsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CiAgYXN5bmMgZnVuY3Rpb24gZ2V0QW5zd2VyKHF1ZXN0aW9uLCBjYWxsYmFjaykgewogICAgdHJ5IHsKICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSBhd2FpdCBnZXRBY2Nlc3NUb2tlbigpOwogICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgdXJsOiAiaHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20vYmFja2VuZC1hcGkvY29udmVyc2F0aW9uIiwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAiQ29udGVudC1UeXBlIjogIglhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gCiAgICAgICAgfSwKICAgICAgICByZXNwb25zZVR5cGU6IHJlc3BvbnNlVHlwZSgpLAogICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgIGFjdGlvbjogIm5leHQiLAogICAgICAgICAgbWVzc2FnZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIGlkOiB1dWlkdjQoKSwKICAgICAgICAgICAgICByb2xlOiAidXNlciIsCiAgICAgICAgICAgICAgY29udGVudDogewogICAgICAgICAgICAgICAgY29udGVudF90eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICBwYXJ0czogW3F1ZXN0aW9uXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgIG1vZGVsOiAidGV4dC1kYXZpbmNpLTAwMi1yZW5kZXIiLAogICAgICAgICAgcGFyZW50X21lc3NhZ2VfaWQ6IHV1aWR2NCgpCiAgICAgICAgfSksCiAgICAgICAgb25sb2Fkc3RhcnQ6IG9ubG9hZHN0YXJ0KCksCiAgICAgICAgb25sb2FkOiBvbmxvYWQoKSwKICAgICAgICBvbmVycm9yOiBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgY29uc29sZS5lcnJvcigiZ2V0QW5zd2VyIGVycm9yOiAiLCBldmVudCk7CiAgICAgICAgfSwKICAgICAgICBvbnRpbWVvdXQ6IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJnZXRBbnN3ZXIgdGltZW91dDogIiwgZXZlbnQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBpZiAoZXJyb3IgPT09ICJVTkFVVEhPUklaRUQiKSB7CiAgICAgICAgcmVtb3ZlQWNjZXNzVG9rZW4oKTsKICAgICAgICBhbGVydExvZ2luKCk7CiAgICAgIH0KICAgICAgY29uc29sZS5lcnJvcigiZ2V0QW5zd2VyIGVycm9yOiAiLCBlcnJvcik7CiAgICB9CiAgICBmdW5jdGlvbiByZXNwb25zZVR5cGUoKSB7CiAgICAgIGlmIChnZXRVc2Vyc2NyaXB0TWFuYWdlcigpID09PSAiVGFtcGVybW9ua2V5IikgewogICAgICAgIHJldHVybiAic3RyZWFtIjsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gInRleHQiOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBvbmxvYWQoKSB7CiAgICAgIGZ1bmN0aW9uIGZpbmlzaCgpIHsKICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soImZpbmlzaCIpOwogICAgICAgIH0KICAgICAgfQogICAgICBmaW5pc2goKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgaWYgKGV2ZW50LnN0YXR1cyA9PT0gNDAxKSB7CiAgICAgICAgICByZW1vdmVBY2Nlc3NUb2tlbigpOwogICAgICAgICAgYWxlcnRMb2dpbigpOwogICAgICAgIH0KICAgICAgICBpZiAoZXZlbnQuc3RhdHVzID09PSA0MDMpIHsKICAgICAgICAgIGFsZXJ0QmxvY2tlZEJ5Q2xvdWRmbGFyZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoZXZlbnQuc3RhdHVzID09PSA0MjkpIHsKICAgICAgICAgIGFsZXJ0RnJlcXVlbnRSZXF1ZXN0cygpOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0VXNlcnNjcmlwdE1hbmFnZXIoKSAhPT0gIlRhbXBlcm1vbmtleSIpIHsKICAgICAgICAgIGlmIChldmVudC5yZXNwb25zZSkgewogICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBKU09OLnBhcnNlKGV2ZW50LnJlc3BvbnNlLnNwbGl0KCJcblxuIikuc2xpY2UoLTMsIC0yKVswXS5zbGljZSg2KSkubWVzc2FnZS5jb250ZW50LnBhcnRzWzBdOwogICAgICAgICAgICBjb250YWluZXJTaG93KGFuc3dlcik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgfQogICAgZnVuY3Rpb24gb25sb2Fkc3RhcnQoKSB7CiAgICAgIGlmIChnZXRVc2Vyc2NyaXB0TWFuYWdlcigpID09PSAiVGFtcGVybW9ua2V5IikgewogICAgICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5yZXNwb25zZS5nZXRSZWFkZXIoKTsKICAgICAgICAgIHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiBwcm9jZXNzVGV4dCh7IGRvbmUsIHZhbHVlIH0pIHsKICAgICAgICAgICAgaWYgKGRvbmUpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IHJlc3BvbnNlSXRlbSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uQXJyYXkuZnJvbSh2YWx1ZSkpOwogICAgICAgICAgICBjb25zdCBpdGVtcyA9IHJlc3BvbnNlSXRlbS5zcGxpdCgiXG5cbiIpOwogICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMikgewogICAgICAgICAgICAgIGNvbnN0IGxhc3RJdGVtID0gaXRlbXMuc2xpY2UoLTMsIC0yKVswXTsKICAgICAgICAgICAgICBpZiAobGFzdEl0ZW0uc3RhcnRzV2l0aCgiZGF0YTogW0RPTkVdIikpIHsKICAgICAgICAgICAgICAgIHJlc3BvbnNlSXRlbSA9IGl0ZW1zLnNsaWNlKC00LCAtMylbMF07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlc3BvbnNlSXRlbSA9IGxhc3RJdGVtOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVzcG9uc2VJdGVtLnN0YXJ0c1dpdGgoImRhdGE6IHsiKSkgewogICAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IEpTT04ucGFyc2UocmVzcG9uc2VJdGVtLnNsaWNlKDYpKS5tZXNzYWdlLmNvbnRlbnQucGFydHNbMF07CiAgICAgICAgICAgICAgY29udGFpbmVyU2hvdyhhbnN3ZXIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlSXRlbS5zdGFydHNXaXRoKCJkYXRhOiBbRE9ORV0iKSkgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWQoKS50aGVuKHByb2Nlc3NUZXh0KTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gcmVtb3ZlQWNjZXNzVG9rZW4oKSB7CiAgICBHTV9kZWxldGVWYWx1ZSgiYWNjZXNzVG9rZW4iKTsKICB9CiAgZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW4oKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamNldCkgPT4gewogICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IEdNX2dldFZhbHVlKCJhY2Nlc3NUb2tlbiIpOwogICAgICBpZiAoIWFjY2Vzc1Rva2VuKSB7CiAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgdXJsOiAiaHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20vYXBpL2F1dGgvc2Vzc2lvbiIsCiAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIGlmIChpc0Jsb2NrZWRieUNsb3VkZmxhcmUocmVzcG9uc2UucmVzcG9uc2VUZXh0KSkgewogICAgICAgICAgICAgIGFsZXJ0TG9naW4oKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4yID0gSlNPTi5wYXJzZShyZXNwb25zZS5yZXNwb25zZVRleHQpLmFjY2Vzc1Rva2VuOwogICAgICAgICAgICBpZiAoIWFjY2Vzc1Rva2VuMikgewogICAgICAgICAgICAgIHJlamNldCgiVU5BVVRIT1JJWkVEIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgR01fc2V0VmFsdWUoImFjY2Vzc1Rva2VuIiwgYWNjZXNzVG9rZW4yKTsKICAgICAgICAgICAgcmVzb2x2ZShhY2Nlc3NUb2tlbjIpOwogICAgICAgICAgfSwKICAgICAgICAgIG9uZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgICAgICAgIHJlamNldChlcnJvcik7CiAgICAgICAgICB9LAogICAgICAgICAgb250aW1lb3V0OiAoKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoImdldEFjY2Vzc1Rva2VuIHRpbWVvdXQhIik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzb2x2ZShhY2Nlc3NUb2tlbik7CiAgICAgIH0KICAgIH0pOwogIH0KICBjb25zdCBfZGVmYXVsdCA9ICIiOwogIGZ1bmN0aW9uIGdldFdlYnNpdGUoKSB7CiAgICBpZiAobG9jYXRpb24uaG9zdG5hbWUuaW5kZXhPZigiLmdvb2dsZS4iKSAhPT0gLTEpIHsKICAgICAgcmV0dXJuIGNvbmZpZ1JlcXVlc3RJbW1lZGlhdGVseSgiZ29vZ2xlIik7CiAgICB9CiAgICBzd2l0Y2ggKGxvY2F0aW9uLmhvc3RuYW1lKSB7CiAgICAgIGNhc2UgInd3dy5iaW5nLmNvbSI6CiAgICAgIGNhc2UgImNuLmJpbmcuY29tIjoKICAgICAgICByZXR1cm4gY29uZmlnUmVxdWVzdEltbWVkaWF0ZWx5KCJiaW5nIik7CiAgICAgIGNhc2UgInd3dy5iYWlkdS5jb20iOgogICAgICAgIHJldHVybiBjb25maWdSZXF1ZXN0SW1tZWRpYXRlbHkoImJhaWR1Iik7CiAgICAgIGNhc2UgImR1Y2tkdWNrZ28uY29tIjoKICAgICAgICByZXR1cm4gY29uZmlnUmVxdWVzdEltbWVkaWF0ZWx5KCJkdWNrZHVja2dvIik7CiAgICAgIGNhc2UgInd3dy5kZWVwbC5jb20iOgogICAgICAgIHJldHVybiBjb25maWdSZXF1ZXN0QWZ0ZXJDbGlja0J1dHRvbigiZGVlcGwiKTsKICAgICAgZGVmYXVsdDoKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVua25vdyB3ZWJzaXRlOiAke2xvY2F0aW9uLmhvc3RuYW1lfWApOwogICAgfQogICAgZnVuY3Rpb24gY29uZmlnUmVxdWVzdEltbWVkaWF0ZWx5KG5hbWUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBuYW1lLAogICAgICAgIHR5cGU6ICJpbW1lZGlhdGVseSIKICAgICAgfTsKICAgIH0KICAgIGZ1bmN0aW9uIGNvbmZpZ1JlcXVlc3RBZnRlckNsaWNrQnV0dG9uKG5hbWUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBuYW1lLAogICAgICAgIHR5cGU6ICJhZnRlci1jbGljay1idXR0b24iCiAgICAgIH07CiAgICB9CiAgfQogIGZ1bmN0aW9uIGdldFF1ZXN0aW9uKCkgewogICAgc3dpdGNoIChnZXRXZWJzaXRlKCkubmFtZSkgewogICAgICBjYXNlICJiYWlkdSI6CiAgICAgICAgcmV0dXJuIG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpLnNlYXJjaFBhcmFtcy5nZXQoIndkIik7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpLnNlYXJjaFBhcmFtcy5nZXQoInEiKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7CiAgICByZXR1cm4gR01fZ2V0VmFsdWUoImNvbnRhaW5lclBvc2l0aW9uIiwgMSk7CiAgfQogIGZ1bmN0aW9uIHNldFBvc2l0aW9uKG5ld1Bvc2l0aW9uKSB7CiAgICBHTV9zZXRWYWx1ZSgiY29udGFpbmVyUG9zaXRpb24iLCBuZXdQb3NpdGlvbik7CiAgfQogIGZ1bmN0aW9uIGluaXRVSSgpIHsKICAgIGluaXRDb250YWluZXIoKTsKICAgIHN3aXRjaCAoZ2V0V2Vic2l0ZSgpLm5hbWUpIHsKICAgICAgY2FzZSAiZ29vZ2xlIjoKICAgICAgICBnb29nbGVJbmplY3RDb250YWluZXIoKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiYmluZyI6CiAgICAgICAgYmluZ0luamVjdENvbnRhaW5lcigpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJiYWlkdSI6CiAgICAgICAgYmFpZHVJbmplY3RDb250YWluZXIoKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiZHVja2R1Y2tnbyI6CiAgICAgICAgZHVja2R1Y2tnb0luamVjdENvbnRhaW5lcigpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJkZWVwbCI6CiAgICAgICAgZGVlcGxJbmplY3RDb250YWluZXIoKTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBhbGVydFVua25vd0Vycm9yKCk7CiAgICB9CiAgICBmdW5jdGlvbiBnb29nbGVJbmplY3RDb250YWluZXIoKSB7CiAgICAgIGlmIChnZXRQb3NpdGlvbigpID09PSAxKSB7CiAgICAgICAgY29uc3QgY29udGFpbmVyMiA9IGdldENvbnRhaW5lcigpOwogICAgICAgIGNvbnN0IHNpZGVyYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJocyIpOwogICAgICAgIGlmIChzaWRlcmJhckNvbnRhaW5lcikgewogICAgICAgICAgc2lkZXJiYXJDb250YWluZXIucHJlcGVuZChjb250YWluZXIyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29udGFpbmVyMi5jbGFzc0xpc3QuYWRkKCJzaWRlYmFyLWZyZWUiKTsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyY250IikuYXBwZW5kQ2hpbGQoY29udGFpbmVyMik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIEdNX2FkZFN0eWxlKCIuY2hhdC1ncHQtY29udGFpbmVye21heC13aWR0aDogMTAwJSFpbXBvcnRhbnR9Iik7CiAgICAgICAgY29uc3QgY29udGFpbmVyMiA9IGdldENvbnRhaW5lcigpOwogICAgICAgIGNvbnN0IG1haW5Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjc2VhcmNoIik7CiAgICAgICAgaWYgKG1haW5Db250YWluZXIpIHsKICAgICAgICAgIG1haW5Db250YWluZXIucHJlcGVuZChjb250YWluZXIyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGJpbmdJbmplY3RDb250YWluZXIoKSB7CiAgICAgIGlmIChnZXRQb3NpdGlvbigpID09PSAxKSB7CiAgICAgICAgY29uc3QgY29udGFpbmVyMiA9IGdldENvbnRhaW5lcigpOwogICAgICAgIGNvbnN0IHNpZGVyYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJfY29udGV4dCIpOwogICAgICAgIHNpZGVyYmFyQ29udGFpbmVyLnByZXBlbmQoY29udGFpbmVyMik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgR01fYWRkU3R5bGUoIi5jaGF0LWdwdC1jb250YWluZXJ7bWF4LXdpZHRoOiAxMDAlIWltcG9ydGFudH0iKTsKICAgICAgICBHTV9hZGRTdHlsZSgiLmNoYXQtZ3B0LWNvbnRhaW5lcnt3aWR0aDogNzB2d30iKTsKICAgICAgICBjb25zdCBjb250YWluZXIyID0gZ2V0Q29udGFpbmVyKCk7CiAgICAgICAgY29uc3QgbWFpbkJhckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIm1haW4iKTsKICAgICAgICBtYWluQmFyQ29udGFpbmVyLnByZXBlbmQoY29udGFpbmVyMik7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGJhaWR1SW5qZWN0Q29udGFpbmVyKCkgewogICAgICBpZiAoZ2V0UG9zaXRpb24oKSA9PT0gMSkgewogICAgICAgIGNvbnN0IGNvbnRhaW5lcjIgPSBnZXRDb250YWluZXIoKTsKICAgICAgICBjb25zdCBzaWRlcmJhckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb250ZW50X3JpZ2h0Iik7CiAgICAgICAgc2lkZXJiYXJDb250YWluZXIucHJlcGVuZChjb250YWluZXIyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBHTV9hZGRTdHlsZSgiLmNoYXQtZ3B0LWNvbnRhaW5lcnttYXgtd2lkdGg6IDEwMCUhaW1wb3J0YW50fSIpOwogICAgICAgIGNvbnN0IGNvbnRhaW5lcjIgPSBnZXRDb250YWluZXIoKTsKICAgICAgICBjb25zdCBzaWRlcmJhckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNjb250ZW50X2xlZnQiKTsKICAgICAgICBzaWRlcmJhckNvbnRhaW5lci5wcmVwZW5kKGNvbnRhaW5lcjIpOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBkdWNrZHVja2dvSW5qZWN0Q29udGFpbmVyKCkgewogICAgICBjb25zdCBjb250YWluZXIyID0gZ2V0Q29udGFpbmVyKCk7CiAgICAgIGNvbnN0IHNpZGVyYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgicmVzdWx0cy0tc2lkZWJhciIpWzBdOwogICAgICBzaWRlcmJhckNvbnRhaW5lci5wcmVwZW5kKGNvbnRhaW5lcjIpOwogICAgfQogICAgZnVuY3Rpb24gZGVlcGxJbmplY3RDb250YWluZXIoKSB7CiAgICAgIGNvbnN0IGNvbnRhaW5lcjIgPSBnZXRDb250YWluZXIoKTsKICAgICAgY29udGFpbmVyMi5zdHlsZS5tYXhXaWR0aCA9ICIxMDAwcHgiOwogICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGkxOG4oImNoYXRHUFRUcmFuc2xhdGUiKTsKICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9ICJjaGF0LWdwdC10cmFuc2xhdGUtYnV0dG9uIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgibG10X190ZXh0YXJlYV9jb250YWluZXIiKVswXS5hcHBlbmRDaGlsZChidXR0b24pOwogICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbigpIHsKICAgICAgICBpbml0Q29udGFpbmVyKCk7CiAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICB0cnkgewogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgibG10X19yYWlzZV9hbHRlcm5hdGl2ZXNfcGxhY2VtZW50IilbMF0uaW5zZXJ0QmVmb3JlKGNvbnRhaW5lcjIsIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImxtdF9fdHJhbnNsYXRpb25zX2FzX3RleHQiKVswXSk7CiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJsbXRfX3RleHRhcmVhX2NvbnRhaW5lciIpWzFdLmluc2VydEJlZm9yZShjb250YWluZXIyLCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJsbXRfX3RyYW5zbGF0aW9uc19hc190ZXh0IilbMF0pOwogICAgICAgIH0KICAgICAgICBsZXQgb3V0bGFuZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInN0cm9uZ1tkYXRhLXRlc3RpZD0nZGVlcGwtdWktdG9vbHRpcC10YXJnZXQnXSIpWzBdLmlubmVySFRNTDsKICAgICAgICBsZXQgcXVlc3Rpb24gPSAiVHJhbnNsYXRlIHRoZSBmb2xsb3dpbmcgcGFyYWdyYXBoIGludG8gIiArIG91dGxhbmcgKyAiIGFuZCBvbmx5ICIgKyBvdXRsYW5nICsgIlxuXG4iICsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNvdXJjZS1kdW1teWRpdiIpLmlubmVySFRNTDsKICAgICAgICBnZXRBbnN3ZXIocXVlc3Rpb24sICh0KSA9PiB7CiAgICAgICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGluaXRNZW51KCkgewogICAgbGV0IHBvc2l0aW9uX2lkID0gR01fcmVnaXN0ZXJNZW51Q29tbWFuZChpMThuKCJjb250YWluZXJQb3NpdGlvbiIpICsgZ2V0UG9zaXRpb24oKSwgcG9zaXRpb25fc3dpdGNoLCAiTSIpOwogICAgZnVuY3Rpb24gcG9zaXRpb25fc3dpdGNoKCkgewogICAgICBHTV91bnJlZ2lzdGVyTWVudUNvbW1hbmQocG9zaXRpb25faWQpOwogICAgICBzZXRQb3NpdGlvbigoZ2V0UG9zaXRpb24oKSArIDEpICUgMik7CiAgICAgIHBvc2l0aW9uX2lkID0gR01fcmVnaXN0ZXJNZW51Q29tbWFuZChpMThuKCJjb250YWluZXJQb3NpdGlvbiIpICsgZ2V0UG9zaXRpb24oKSwgcG9zaXRpb25fc3dpdGNoLCAiTSIpOwogICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0KICB9CiAgYXN5bmMgZnVuY3Rpb24gbWFpbigpIHsKICAgIGluaXRVSSgpOwogICAgaW5pdE1lbnUoKTsKICAgIGlmIChnZXRXZWJzaXRlKCkudHlwZSA9PT0gImltbWVkaWF0ZWx5IikgewogICAgICBnZXRBbnN3ZXIoZ2V0UXVlc3Rpb24oKSk7CiAgICB9CiAgfQogIG1haW4oKS5jYXRjaCgoZSkgPT4gewogICAgY29uc29sZS5lcnJvcihlKTsKICB9KTsKfSkoKTsK"},{"name":"Google Classroom Dark Mode Theme","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://classroom.google.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685022318377,"data":{}},"enabled":true,"position":10,"file_url":"https://openuserjs.org/install/ThaCheeseBun/Google_Classroom_Dark_Mode_Theme.user.js","uuid":"72b9e392-91db-4082-951a-dba71d202f70","source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgICAgR29vZ2xlIENsYXNzcm9vbSBEYXJrIE1vZGUgVGhlbWUNCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzM5NTMxOS1nb29nbGUtY2xhc3Nyb29tLWRhcmstbW9kZS10aGVtZQ0KLy8gQHZlcnNpb24gICAgICAwLjUuMQ0KLy8gQGRlc2NyaXB0aW9uICBBIGRhcmsgbW9kZSB0aGVtZSBmb3IgR29vZ2xlIENsYXNzcm9vbS4gRm9yIGFsbCB0aGUgc3R1ZGVudHMgdGhhdCBwcmVmZXIgbmlnaHQgb3ZlciBkYXkuDQovLyBAYXV0aG9yICAgICAgIFRoYUNoZWVzZUJ1bg0KLy8gQG1hdGNoICAgICAgICAqOi8vY2xhc3Nyb29tLmdvb2dsZS5jb20vKg0KLy8gQGdyYW50ICAgICAgICBub25lDQovLyBAbGljZW5zZSAgICAgIE1JVDsgaHR0cHM6Ly9taXQtbGljZW5zZS5vcmcvDQovLyA9PS9Vc2VyU2NyaXB0PT0NCg0KKGZ1bmN0aW9uKCkgew0KICAgICd1c2Ugc3RyaWN0JzsNCg0KICAgIHZhciBzdHlsZSA9IGANCmJvZHkgew0KICAgIGJhY2tncm91bmQ6ICMyYzJjMmM7DQogICAgY29sb3I6ICNmZmY7DQp9DQoNCi8qIGhlbHAgYnRuICovDQouSzJtWFBiIHsNCiAgICBjb2xvcjogI2ZmZjsNCiAgICBmaWxsOiAjZmZmOw0KfQ0KDQovKiBsaW5rcyAqLw0KYSB7DQogICAgY29sb3I6IGRvZGdlcmJsdWU7DQp9DQphOnZpc2l0ZWQgew0KICAgIGNvbG9yOiBtZWRpdW1vcmNoaWQ7DQp9DQoNCi8qIHRvcCBiYXIgKi8NCi5qb0pnbGIgew0KICAgIGJhY2tncm91bmQ6ICMzYzNjM2M7DQogICAgYm9yZGVyLWJvdHRvbTogbm9uZTsNCn0NCi5qb0pnbGIsIC5qb0pnbGIua0xIbjMgew0KICAgIGJveC1zaGFkb3c6IDBweCAwcHggNnB4IDRweCByZ2JhKDI4LCAyOCwgMjgsIC40KTsNCn0NCg0KLyogZ29vZ2xlIGFwcHMgKi8NCi5nYl9xYSBzdmcsIC5nYl9DW2FyaWEtZXhwYW5kZWQ9InRydWUiXSAuZ2JfVmUgew0KICAgIGZpbGw6ICNmZmY7DQp9DQoNCi8qIGljb25zICovDQouSXFKVGVlLCAuVmlDaTQsIC54U1A1aWMsIC5janEyRGIgew0KICAgIGNvbG9yOiAjZmZmOw0KfQ0KDQovKiBjbGFzc3Jvb20gZWxlbXMgKi8NCi5Bb3BuZGQgew0KICAgIGJhY2tncm91bmQ6ICMzYzNjM2M7DQogICAgYm9yZGVyLWNvbG9yOiAjNWM1YzVjOw0KfQ0KLlNaMGtaZSB7DQogICAgYm9yZGVyLXRvcDogbm9uZSAhaW1wb3J0YW50Ow0KfQ0KLmFwRnNPLm9ua2NHZCwNCi5hcEZzTy5vbmtjR2Q6dmlzaXRlZCB7DQogICAgY29sb3I6ICNmZmY7DQp9DQoub0JTUkxlIHsNCiAgICBjb2xvcjogI2ZmZjsNCn0NCi5KUGRSNmIgew0KICAgIGJhY2tncm91bmQ6ICMzYzNjM2M7DQogICAgYm94LXNoYWRvdzogMHB4IDBweCAycHggMXB4IHJnYmEoMjgsIDI4LCAyOCwgLjQpOw0KfQ0KDQovKiBuYXYgbWVudSAqLw0KLmFzUVhWIHsNCiAgICBjb2xvcjogI2ZmZjsNCn0NCi5kREtoVmMsIC5pTGp6RGMgew0KICAgIGNvbG9yOiAjYWZhZmFmOw0KfQ0KLmtDdFl3ZSB7DQogICAgYm9yZGVyLWNvbG9yOiAjNGM0YzRjICFpbXBvcnRhbnQ7DQp9DQouRVRSa0NlIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2MzYzNjICFpbXBvcnRhbnQ7DQp9DQouRFNoeU1jLUFhVEZmZSAuWGk4Y3BiLnFzNDFxZSAuTGxjZkssIC5iRmpVbWItWXNsN0ZlLCAuVlVvS1ogew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM0YzRjNGMgIWltcG9ydGFudDsNCn0NCi5YaThjcGI6aG92ZXIgLkxsY2ZLIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDc2LCA3NiwgNzYsIC41KSAhaW1wb3J0YW50Ow0KfQ0KDQovKiBjYWxlbmRhciAqLw0KLkV2dDdjYiwgLkV2dDdjYjp2aXNpdGVkLCAuZkt6N09kIC5UcFFtOWQgew0KICAgIGNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7DQp9DQouQk9XNjQgew0KICAgIGJvcmRlci1jb2xvcjogIzVjNWM1YyAhaW1wb3J0YW50Ow0KfQ0KLndRdVBrIC5Kc3FMTS5ONFhWN2Qgew0KICAgIGNvbG9yOiAjYWZhZmFmICFpbXBvcnRhbnQ7DQp9DQoueWJPZG5mIC5PQTBxTmIgLkxNZ3ZSYlthcmlhLXNlbGVjdGVkPSJ0cnVlIl0gew0KICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzYsIDc2LCA3NiwgLjUpICFpbXBvcnRhbnQ7DQp9DQoubmNGSGVkIC5Nb2NHOGMuS0tqdlhiIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGM0YzRjICFpbXBvcnRhbnQ7DQp9DQoNCi8qIHRvZG8gcGFnZSAqLw0KLlhwME9DZSwgLm5jRkhlZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzNjM2MzYyAhaW1wb3J0YW50Ow0KfQ0KLlhwME9DZSB7DQogICAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7DQp9DQouSFoza1djLCAuV09Qd1hlLCAuZ0prMjRjLCAuYXNRWFYtRkd6WUwgew0KICAgIGNvbG9yOiAjZmZmOw0KfQ0KLk1IeHRpYzpub3QoOmxhc3QtY2hpbGQpLCAuTEtxRlhjIHsNCiAgICBib3JkZXItY29sb3I6ICM0YzRjNGMgIWltcG9ydGFudDsNCn0NCi5NSHh0aWM6aG92ZXIgew0KICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGM0YzRjOw0KfQ0KDQovKiBjbGFzcyBwYWdlICovDQouZDRGZTBkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2MzYzNjICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyLWNvbG9yOiAjNGM0YzRjICFpbXBvcnRhbnQ7DQp9DQouRVpyYm5kLCAuQTZkQzJjLCAuTzk4TGosIC5ycG80d2YsIC50TERFSGQsIC5jU3lQZ2IsIC53WlRBTmUgLkoxcmFOOmhvdmVyLCAudWR4U21jLCAubHppWnViLCAubHppWnViOnZpc2l0ZWQgew0KICAgIGNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7DQp9DQouc2REQ21lLCAuSzZPdnFkLCAuVDhyVGpkLCAuTHpkd2hkLUJyWlNPZCwgLm9ua2NHZCwgLm9ua2NHZDp2aXNpdGVkLCAud1pUQU5lIC5KMXJhTiB7DQogICAgY29sb3I6ICNjY2M7DQp9DQouVm5PSHdmLVR2bTlkYiwgLkJFQUdTOm5vdCguUkRQWkUpLCAuVm5PSHdmLVd2ZDlDYywgLkNKWHplZSBhOmFjdGl2ZSwNCi5DSlh6ZWUgYTpmb2N1cywgLkNKWHplZSBhOmhvdmVyLCAuc2REQ21lLCAuSzZPdnFkLCAudm5ucjVlIC5zbkJ5YWMsDQoudm5ucjVlIC5Bd29yZ2UsIC5YcHhzVmIgLkF3b3JnZSwgLlVRdWFHYywgLndDRGttZiwgLmtzYU90ZCB7DQogICAgY29sb3I6ICNmZmYgIWltcG9ydGFudDsNCn0NCi5NeW1IMGQ6aG92ZXIgLlZCRWR0Yy1XdmQ5Q2MsIC5sM0YxeWU6bm90KC5SRFBaRSksIC5JTXZZSWQsIC5JTXZZSWQ6dmlzaXRlZCwgLm5STE96ZDpob3ZlciwgLm5STE96ZDpob3ZlciAqLCAuTzk4TGosIC5MemR3aGQtQnJaU09kIHsNCiAgICBjb2xvcjogI2NjYyAhaW1wb3J0YW50Ow0KfQ0KLkdXWjd5ZiwgLmhnakJEYywgLnZubnI1ZSAuQ0l5OUYsIC5xazBsZWU6Zm9jdXM6OmFmdGVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2MzYzNjICFpbXBvcnRhbnQ7DQogICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50Ow0KfQ0KLnZubnI1ZSAuSTlPSkhlIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2MzYzNjICFpbXBvcnRhbnQ7DQp9DQoubmRjc0JmLmNqenBrYy1XdmQ5Q2Mgew0KICAgIGJvcmRlci1jb2xvcjogIzVjNWM1YzsNCn0NCi5ZNUZZSmUuUkRQWkUgew0KICAgIGZpbGw6ICNjY2M7DQogICAgY29sb3I6ICNjY2M7DQp9DQouT1o2VzBkOm5vdCguUkRQWkUpLCAubDNGMXllOm5vdCguUkRQWkUpIC5UcFFtOWQsIC53d25NdGI6bm90KC5SRFBaRSkgew0KICAgIGZpbGw6ICNmZmYgIWltcG9ydGFudDsNCiAgICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50Ow0KfQ0KLlpvVDFEOmhvdmVyLmlkdHA0ZSwgLnRVSktHZDpub3QoLnhwMmRKKTpub3QoLnJaWHl5KTpob3ZlciAuaWR0cDRlLCAudFVKS0dkOm5vdCgueHAyZEopLm5kY3NCZiAuaWR0cDRlLCAuVjhhcHYsIC5QM1cwRGQtWXNsN0ZlOmZvY3VzIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGM0YzRjICFpbXBvcnRhbnQ7DQp9DQouTmlhY2hlLCAuUVREMnVmIHsNCiAgICBib3JkZXItY29sb3I6ICMzYzNjM2MgIWltcG9ydGFudDsNCn0NCi5VSVNZOGQtWXNsN0ZlOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2MzYzNjICFpbXBvcnRhbnQ7DQogICAgY29sb3I6ICNjY2M7DQp9DQouZXVtWHpmOmFmdGVyIHsNCiAgICBib3JkZXItY29sb3I6ICNmZmYgIWltcG9ydGFudDsNCn0NCi50VUpLR2Q6bm90KDpmaXJzdC1jaGlsZCksIC55U2p1dmQgLmVxcXJPLCAuczJnM1hkLCAub2xlVjhkLCAuWk5FNHksIC5QZUdIZ2IuUThVOHVjIC5Pbm84NWMrLm9oOUNGYiwgLk85WXBIYiwgLnU3M0FwYywgLmQ2Q1dUZCB7DQogICAgYm9yZGVyLWNvbG9yOiAjNGM0YzRjICFpbXBvcnRhbnQ7DQp9DQoubFh1eFkgew0KICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDhweCAwIHJnYmEoMCwgMCwgMCwgMC43NSk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjc1KTsNCiAgICBib3gtc2hhZG93OiAwIDAgOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjc1KQ0KfQ0KLkJFQUdTLCAuUDAyRFliLCAueWNibTFkIHsNCiAgICBib3JkZXItY29sb3I6ICM0YzRjNGMgIWltcG9ydGFudDsNCn0NCi5ZNXNFOGQ6bm90KC5SRFBaRSkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMyYzJjMmMgIWltcG9ydGFudDsNCn0NCi5ZNXNFOGQ6bm90KC5SRFBaRSk6aG92ZXIgew0KICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5rc2FPdGQgew0KICAgIGNvbG9yOiAjMWU4ZTNlOw0KfQ0KLnVPMzJhYyB7DQogICAgYm9yZGVyLWNvbG9yOiAjNWM1YzVjICFpbXBvcnRhbnQ7DQp9DQoudVEzRVNkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2MzYzNjICFpbXBvcnRhbnQ7DQp9DQoNCi8qIGRpYWxvZyAqLw0KLmlwaC1kaWFsb2cgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM0YzRjNGMgIWltcG9ydGFudDsNCn0NCi5pcGgtZGlhbG9nLXRpdGxlLCAuaXBoLWRpYWxvZy1jb250ZW50IHsNCiAgICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50Ow0KfQ0KDQovKiBqb2luIGNsYXNzcm9vbSAqLw0KLmdLa1pDZSwgLkQzb0JFZSAubjlJUzE6YmVmb3JlLCAuQWVBQWtmIHsNCiAgICBib3JkZXItY29sb3I6ICM0YzRjNGM7DQp9DQouRDNvQkVlIC5xVHM1WGMgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzYzNjM2M7DQp9DQoucVRzNVhjLCAucG9GV05lIHsNCiAgICBjb2xvcjogI2ZmZjsNCn0NCi5JN09YZ2YuWkVlSHJkLCAuTlo5d2RjLCAuaTVzZWhlLCAua294NDJjIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmMyYzJjICFpbXBvcnRhbnQ7DQp9YDsNCiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7DQogICAgZWxlbS5pbm5lclRleHQgPSBzdHlsZTsNCiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsZW0pOw0KfSkoKTs="},{"name":"Anti-adblocker","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://*deviantart.com/*","http*://*.deviantart.com/*"],"orig_matches":["https://openuserjs.org/?q=anti-adblock"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685022468929,"data":{}},"enabled":true,"position":11,"file_url":"https://openuserjs.org/src/scripts/Goodgy/Anti-adblocker.user.js","uuid":"b748c731-663f-4b6d-a748-85fbfc44e535","source":"Ly8gPT1Vc2VyU2NyaXB0PT0NCi8vIEBuYW1lICAgICAgICAgQW50aS1hZGJsb2NrZXINCi8vIEBuYW1lc3BhY2UgaHR0cHM6Ly9vcGVudXNlcmpzLm9yZy91c2Vycy9Hb29kZ3kNCi8vIEB1cGRhdGVVUkwgaHR0cHM6Ly9vcGVudXNlcmpzLm9yZy9tZXRhL0dvb2RneS9BbnRpLWFkYmxvY2tlci5tZXRhLmpzDQovLyBAZG93bmxvYWRVUkwgaHR0cHM6Ly9vcGVudXNlcmpzLm9yZy9zcmMvc2NyaXB0cy9Hb29kZ3kvQW50aS1hZGJsb2NrZXIudXNlci5qcw0KLy8gQHZlcnNpb24gICAgICAxLjENCi8vIEBkZXNjcmlwdGlvbiAgUmVtb3ZlcyBhbnkgbm90aWZpY2F0aW9uIHRoYXQgdGVsbHMgeW91IHRvIGRpc2FibGUgYWRibG9jay4NCi8vIEBhdXRob3IgICAgICAgR29vZGd5DQovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjEuMC5taW4uanMNCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly8qZGV2aWFudGFydC5jb20vKg0KLy8gQGluY2x1ZGUgICAgICBodHRwKjovLyouZGV2aWFudGFydC5jb20vKg0KLy8gQG1hdGNoICAgICAgICBodHRwczovL29wZW51c2VyanMub3JnLz9xPWFudGktYWRibG9jaw0KLy8gQGdyYW50ICAgICAgICBub25lDQovLyA9PS9Vc2VyU2NyaXB0PT0NCg0KKGZ1bmN0aW9uKCkgew0KICAgICd1c2Ugc3RyaWN0JzsNCg0KDQogICAgZnVuY3Rpb24gcmVtb3ZlX2Jhbm5lcl9kZXZpYW50YXJ0KCl7DQogICAgICAgICQoJ2Rpdi5iYW5uZXItd3JhcCcpLmhpZGUoKTsNCiAgICAgICAgJCgnZGl2I2Jsb2NrLW5vdGljZScpLmhpZGUoKTsNCiAgICAgICAgJCgnZGl2I2Vsbmluby1tb2RhbCcpLmhpZGUoKTsNCiAgICAgICAgJCgnZGl2I21vZGFsZmFkZScpLmhpZGUoKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdGFydF91cCgpew0KICAgICAgICB2YXIgY3VycmVudF9saW5rID0gJChkb2N1bWVudCkuYXR0cignVVJMJyk7DQoNCiAgICAgICAgaWYgKGN1cnJlbnRfbGluay5pbmRleE9mKCJkZXZpYW50YXJ0LmNvbSIpICE9LTEpIHsNCiAgICAgICAgICAgIHNldEludGVydmFsKHJlbW92ZV9iYW5uZXJfZGV2aWFudGFydCwxKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnNvbGUubG9nKCJEb25lIik7DQogICAgfQ0KDQogICAgLy8gSWYgdGhlIHdpbmRvdyBpcyBsb2FkZWQsIHN0YXJ0IHVwIHRoZSBib3QNCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsNCiAgICAgICAgc3RhcnRfdXAoKTsNCiAgICB9KTsNCn0pKCk7","requires":[{"meta":{"name":"jquery-3.1.0.min.js","url":"https://code.jquery.com/jquery-3.1.0.min.js","ts":1685022469409,"mimetype":"text/javascript"},"source":""}]},{"name":"The New York Times Paywall Bypass","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^(?:^http.://www.nytimes.com/\\d{4}\\/.*)$/","https://www.nytimes.com/slideshow*","https://www.nytimes.com/live*","https://www.nytimes.com/interactive*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685022661000,"data":{}},"enabled":true,"position":12,"file_url":"https://greasyfork.org/scripts/441034-the-new-york-times-paywall-bypass/code/The%20New%20York%20Times%20Paywall%20Bypass.user.js","uuid":"132a7801-1bb3-4a64-9abf-8272100dc2b6","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgVGhlIE5ldyBZb3JrIFRpbWVzIFBheXdhbGwgQnlwYXNzCi8vIEBuYW1lc3BhY2UgaHR0cHM6Ly9qb3NoY2FudGNvLmRlCi8vIEB2ZXJzaW9uIDEuMi4wCi8vIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHBheXdhbGxzIHdoZW4gdHJ5aW5nIHRvIHZpZXcgY29udGVudCBvbiBUaGUgTmV3IFlvcmsgVGltZXMKLy8gQGF1dGhvciBKb3NodWEgRm91bnRhaW4KLy8gQGxpY2Vuc2UgR1BMLTMuMC1vci1sYXRlcgovLyBAZ3JhbnQgR01fYWRkU3R5bGUKLy8gQHJ1bi1hdCBkb2N1bWVudC1zdGFydAovLyBAaW5jbHVkZSAvXig/Ol5odHRwLjovL3d3dy5ueXRpbWVzLmNvbS9cZHs0fVwvLiopJC8KLy8gQGluY2x1ZGUgaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vc2xpZGVzaG93KgovLyBAaW5jbHVkZSBodHRwczovL3d3dy5ueXRpbWVzLmNvbS9saXZlKgovLyBAaW5jbHVkZSBodHRwczovL3d3dy5ueXRpbWVzLmNvbS9pbnRlcmFjdGl2ZSoKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICBsZXQgY3NzID0gYAogICAgICAgICNhcHAgPiBkaXYgPiBkaXY6bm90KFtpZF0pLCAjc2l0ZS1jb250ZW50IHsKICAgICAgICAgICAgcG9zaXRpb246IHN0YXRpYyAhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAjZ2F0ZXdheS1jb250ZW50LCAjc3RhbmRhbG9uZS1oZWFkZXIsICNhcHAgPiBkaXYgPiBkaXY6Zmlyc3QtY2hpbGQgPiBkaXY6bGFzdC1jaGlsZCB7CiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7CiAgICAgICAgfQogICAgYDsKICAgIGlmICh0eXBlb2YgR01fYWRkU3R5bGUgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgR01fYWRkU3R5bGUoY3NzKTsKICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IHN0eWxlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CiAgICAgICAgc3R5bGVOb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpOwogICAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJoZWFkIikgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hcHBlbmRDaGlsZChzdHlsZU5vZGUpOwogICAgfQp9KSgpOw=="},{"name":"Bypass Paywalls","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.adweek.com/*","*://*.ad.nl/*","*://*.americanbanker.com/*","*://*.ambito.com/*","*://*.baltimoresun.com/*","*://*.barrons.com/*","*://*.bloombergquint.com/*","*://*.bloomberg.com/*","*://*.bndestem.nl/*","*://*.bostonglobe.com/*","*://*.bd.nl/*","*://*.brisbanetimes.com.au/*","*://*.businessinsider.com/*","*://*.caixinglobal.com/*","*://*.centralwesterndaily.com.au/*","*://*.acs.org/*","*://*.chicagotribune.com/*","*://*.corriere.it/*","*://*.chicagobusiness.com/*","*://*.dailypress.com/*","*://*.gelderlander.nl/*","*://*.groene.nl/*","*://*.destentor.nl/*","*://*.speld.nl/*","*://*.tijd.be/*","*://*.volkskrant.nl/*","*://*.demorgen.be/*","*://*.denverpost.com/*","*://*.df.cl/*","*://*.editorialedomani.it/*","*://*.dynamed.com/*","*://*.ed.nl/*","*://*.elmercurio.com/*","*://*.elpais.com/*","*://*.elperiodico.com/*","*://*.elu24.ee/*","*://*.britannica.com/*","*://*.estadao.com.br/*","*://*.examiner.com.au/*","*://*.expansion.com/*","*://*.fnlondon.com/*","*://*.financialpost.com/*","*://*.ft.com/*","*://*.firstthings.com/*","*://*.foreignpolicy.com/*","*://*.fortune.com/*","*://*.genomeweb.com/*","*://*.glassdoor.com/*","*://*.globes.co.il/*","*://*.grubstreet.com/*","*://*.haaretz.co.il/*","*://*.haaretz.com/*","*://*.handelsblatt.com/*","*://*.harpers.org/*","*://*.courant.com/*","*://*.hbr.org/*","*://*.heraldsun.com.au/*","*://*.fd.nl/*","*://*.historyextra.com/*","*://*.humo.be/*","*://*.ilmanifesto.it/*","*://*.inc.com/*","*://*.interest.co.nz/*","*://*.investorschronicle.co.uk)","*://*.lecho.be/*","*://*.labusinessjournal.com/*","*://*.lanacion.com.ar/*","*://*.repubblica.it/*","*://*.lastampa.it/*","*://*.latercera.com/*","*://*.lavoixdunord.fr/*","*://*.ledevoir.com/*","*://*.leparisien.fr/*","*://*.lesechos.fr/*","*://*.loebclassics.com/*","*://*.lrb.co.uk/*","*://*.latimes.com/*","*://*.mit.edu/*","*://*.technologyreview.com/*","*://*.medium.com/*","*://*.medscape.com/*","*://*.mexiconewsdaily.com/*","*://*.mv-voice.com/*","*://*.nationalgeographic.com/*","*://*.nydailynews.com/*","*://*.nrc.nl/*","*://*.ntnews.com.au/*","*://*.nationalpost.com/*","*://*.nzz.ch/*","*://*.nymag.com/*","*://*.nzherald.co.nz/*","*://*.ocregister.com/*","*://*.orlandosentinel.com/*","*://*.pzc.nl/*","*://*.paloaltoonline.com/*","*://*.parool.nl/*","*://*.postimees.ee/*","*://*.qz.com/*","*://*.quora.com/*","*://*.gelocal.it/*","*://*.republic.ru/*","*://*.reuters.com/*","*://*.sandiegouniontribune.com/*","*://*.sfchronicle.com/*","*://*.scientificamerican.com/*","*://*.seekingalpha.com/*","*://*.slate.com/*","*://*.sofrep.com/*","*://*.statista.com/*","*://*.startribune.com/*","*://*.stuff.co.nz/*","*://*.sun-sentinel.com/*","*://*.techinasia.com/*","*://*.telegraaf.nl/*","*://*.adelaidenow.com.au/*","*://*.theadvocate.com.au/*","*://*.theage.com.au/*","*://*.the-american-interest.com/*","*://*.theathletic.com/*","*://*.theathletic.co.uk/*","*://*.theatlantic.com/*","*://*.afr.com/*","*://*.theaustralian.com.au/*","*://*.bizjournals.com/*","*://*.canberratimes.com.au/*","*://*.thecourier.com.au/*","*://*.couriermail.com.au/*","*://*.thecut.com/*","*://*.dailytelegraph.com.au/*","*://*.thediplomat.com/*","*://*.economist.com/*","*://*.theglobeandmail.com/*","*://*.theherald.com.au/*","*://*.thehindu.com/*","*://*.irishtimes.com/*","*://*.kansascity.com/*","*://*.mercurynews.com/*","*://*.themercury.com.au/*","*://*.mcall.com/*","*://*.thenation.com/*","*://*.thenational.scot/*","*://*.newstatesman.com/*","*://*.nytimes.com/*","*://*.newyorker.com/*","*://*.news-gazette.com/*","*://*.theolivepress.es/*","*://*.inquirer.com/*","*://*.thesaturdaypaper.com.au/*","*://*.seattletimes.com/*","*://*.spectator.com.au/*","*://*.spectator.co.uk/*","*://*.smh.com.au/*","*://*.telegraph.co.uk/*","*://*.thestar.com/*","*://*.wsj.com/*","*://*.washingtonpost.com/*","*://*.thewrap.com/*","*://*.themarker.com/*","*://*.the-tls.co.uk/*","*://*.towardsdatascience.com/*","*://*.trouw.nl/*","*://*.tubantia.nl/*","*://*.vanityfair.com/*","*://*.vn.nl/*","*://*.vulture.com/*","*://*.journalnow.com/*","*://*.wired.com/*","*://*.worldpoliticsreview.com/*","*://*.zeit.de/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685022692508,"data":{}},"enabled":true,"position":13,"file_url":"https://github.com/LegeBeker/bypass-paywalls-tampermonkey/raw/master/bypass-paywalls-tampermonkey.user.js","uuid":"3d957d56-775a-4d10-826b-cfc44bf2aec9","source":""},{"name":"YouTube Animated Thumbnails & Preview Videos","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://*youtube.com/my_videos_edit*","http://*youtube.com/my_subscribers*","https://*youtube.com/my_videos_edit*","https://*youtube.com/my_subscribers*"],"orig_includes":["http://*.youtube.com/*","http://youtube.com/*","https://*.youtube.com/*","https://youtube.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["i.ytimg.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685023546523,"data":{}},"enabled":true,"position":14,"file_url":"https://greasyfork.org/scripts/2818-youtube-animated-thumbnails-preview-videos/code/YouTube%20Animated%20Thumbnails%20%20Preview%20Videos.user.js","uuid":"ba21f0f1-8bdf-436a-aafd-c356ef81e8f3","source":"","requires":[{"meta":{"name":"GM_config.js","url":"https://greasyfork.org/scripts/1884-gm-config/code/GM_config.js?version=4836","ts":1685023546879,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"JoeSimmons'%20Library.js","url":"https://greasyfork.org/scripts/1885-joesimmons-library/code/JoeSimmons'%20Library.js?version=4838","ts":1685023546964,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"JSL%20-%20AJAX%20plugin.js","url":"https://greasyfork.org/scripts/2817-jsl-ajax-plugin/code/JSL%20-%20AJAX%20plugin.js?version=7911","ts":1685023546975,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgSlNMIC0gQUpBWCBwbHVnaW4KLy8gQG5hbWVzcGFjZSAgICAgaHR0cDovL3VzZXJzY3JpcHRzLm9yZy91c2Vycy8yMzY1MgovLyBAZGVzY3JpcHRpb24gICBBbiBBSkFYIHBsdWdpbiBmb3IgSlNMCi8vIEBpbmNsdWRlICAgICAgICoKLy8gQHZlcnNpb24gICAgICAgMS4xLjAKLy8gQGdyYW50ICAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gPT0vVXNlclNjcmlwdD09CgovKiBDSEFOR0VMT0cKCjEuMS4wICgzLzI4LzIwMTQpCiAgICAtIGFkZGVkIEpTTC5hamF4Q2xlYXIoKSB0byBjbGVhciBhbGwgY3VycmVudCBhbmQgcGVuZGluZyByZXF1ZXN0cwoKMS4wLjIxICgxMC82LzIwMTMpCiAgICAtIGZpeGVkIGJ1ZyB3aXRoIC5jbGVhcigpCgoxLjAuMiAoMTAvNi8yMDEzKQogICAgLSBhZGRlZCBhIG5ldyBvcHRpb246IGFzeW5jCiAgICAgICAgZmFsc2UgKGRlZmF1bHQpID09PiBzeW5jaHJvbm91cywgYnV0IG5vbi1mcmVlemluZyByZXF1ZXN0cyAoc2VxdWVudGlhbCkKICAgICAgICAgICAgd2FpdHMgZm9yIHByZXZpb3VzIHJlcXVlc3QgdG8gZmluaXNoIGJlZm9yZSBzdGFydGluZyBhIG5ldyBvbmUKICAgICAgICB0cnVlID09PiBzZW5kcyBhbGwgcmVxdWVzdHMgaW1tZWRpYXRlbHkgd2hlbiB0aGV5IGFyZSBhZGRlZCB0byB0aGUgcXVldWUKICAgIC0gZml4ZWQgZGVsYXkgaXNzdWUuCiAgICAgICAgdGhlIG5leHQgcmVxdWVzdCB3b3VsZCBnZXQgcnVuIG9uIHRoZSAnb25wcm9ncmVzcycgJiAnb25yZWFkeXN0YXRlY2hhbmdlJyBldmVudHMKICAgICAgICBpbnN0ZWFkIG9mIHdoZW4gdGhleSBhY3R1YWxseSBsb2FkIGZ1bGx5CiAgICAtIGFkZGVkIGEgLmNsZWFyKCkgbWV0aG9kCiAgICAgICAgaXQgbWF5IGJlIGNhbGxlZCBvbiBhbnkgYWpheCBpbnN0YW5jZSBsaWtlIEpTTC5hamF4KC4uLikuY2xlYXIoKQogICAgICAgIGl0IGNhbiBldmVuIHNpbXBseSBiZSBjYWxsZWQgYXMgSlNMLmFqYXgoKS5jbGVhcigpCiAgICAgICAgaXQgd2lsbCBjbGVhciBBTEwgcmVxdWVzdHMgYXQgdGhlIG1vbWVudAoKMS4wLjEgKDEwLzMvMjAxMykKICAgIC0gZml4ZWQgc21hbGwgYnVnIHdpdGggcGFzc2luZyBhIHVybCBhcnJheQogICAgLSBmaXhlZCBidWcgbm90IGFsbG93aW5nIEhFQUQgcmVxdWVzdHMgdG8gYmUgcmVjb2duaXplZAoKMS4wLjAgKDEwLzEvMjAxMykKICAgIC0gY3JlYXRlZAoKKi8KCihmdW5jdGlvbiAodW5kZWZpbmVkKSB7CgogICAgJ3VzZSBzdHJpY3QnOyAvLyB1c2Ugc3RyaWN0IG1vZGUgaW4gRUNNQVNjcmlwdC01CgogICAgdmFyIHF1ZXVlID0gW10sICAgICAgICAgICAgICAgLy8gdGhlIHJlcXVlc3QgcXVldWUKICAgICAgICBibGFuayA9IGZ1bmN0aW9uICgpIHt9LCAgIC8vIGJsYW5rIGZ1bmN0aW9uIHRvIHVzZSBhcyBkZWZhdWx0IGNhbGxiYWNrCiAgICAgICAgeGhySW5Qcm9ncmVzcyA9IGZhbHNlLCAgICAvLyBib29sZWFuIHRvIGtub3cgaWYgd2Ugc2hvdWxkIGxvYWQgdGhlIG5leHQgcmVxdWVzdAogICAgICAgIHhockNsZWFyZWQgPSBmYWxzZTsgICAgICAgLy8gYm9vbGVhbiB0byBrbm93IGlmIHRoZSB4aHIgaGFzIGJlZW4gY2xlYXJlZCBhbmQgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB3ZSBzaG91bGQgZXhlY3V0ZSBhbnkgb2YgdGhlIGNhbGxiYWNrcwoKICAgIHZhciBjb3JlID0gewogICAgICAgIC8vIG9iamVjdAogICAgICAgICdoYXNPd25Qcm9wZXJ0eScgOiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5CiAgICB9OwoKICAgIGZ1bmN0aW9uIGNvcHlPYmplY3QobykgewogICAgICAgIHZhciBrZXksIHZhbHVlLCBuZXdPID0ge307CgogICAgICAgIGZvciAoa2V5IGluIG8pIHsKICAgICAgICAgICAgdmFsdWUgPSBvW2tleV07CgogICAgICAgICAgICBpZiAoY29yZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGtleSkgJiYgdmFsdWUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgbmV3T1trZXldID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBuZXdPOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvRGF0YVN0cmluZyhvKSB7CiAgICAgICAgdmFyIGtleSwgdmFsdWUsIGRhdGFTdHJpbmcgPSAnJzsKCiAgICAgICAgZm9yIChrZXkgaW4gbykgewogICAgICAgICAgICB2YWx1ZSA9IG9ba2V5XTsKCiAgICAgICAgICAgIGlmIChjb3JlLmhhc093blByb3BlcnR5LmNhbGwobywga2V5KSAmJiB2YWx1ZSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBkYXRhU3RyaW5nICs9IGtleSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyAnJic7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBkYXRhU3RyaW5nLnNsaWNlKDAsIC0xKTsKICAgIH0KCiAgICBmdW5jdGlvbiB4aHIoKSB7CiAgICAgICAgdmFyIHJlcSA9IHF1ZXVlWzBdLCAvLyBnZXQgdGhlIG9iamVjdCB3aGljaCBpcyBmaXJzdCBpbiB0aGUgcXVldWUKICAgICAgICAgICAgeGhyT2JqID0ge30sIGtleTsKCiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRXZlbnRzKHR5cGUsIHJlc3AsIGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBldmVudCA9IGV2ZW50IHx8IHt9LCBuZXdSZXNwLCBjb250ZXh0OwogICAgICAgICAgICAgICAgcmVxLmRlbGF5ID0gcmVxLmRlbGF5ID4gMTUgPyByZXEuZGVsYXkgOiAxNTsgLy8gZG9uJ3Qgd2FudCB0byBtZXNzIHVwIGNhbGxiYWNrcwoKICAgICAgICAgICAgaWYgKHhockNsZWFyZWQgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcVt0eXBlXSAhPT0gYmxhbmspIHsKICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhIG5ldyByZXNwb25zZSBvYmplY3QgdG8gZ2l2ZSB0byB0aGUgdXNlcgogICAgICAgICAgICAgICAgbmV3UmVzcCA9IHsKICAgICAgICAgICAgICAgICAgICBsZW5ndGhDb21wdXRhYmxlIDogcmVzcC5sZW5ndGhDb21wdXRhYmxlIHx8IGV2ZW50Lmxlbmd0aENvbXB1dGFibGUgfHwgbnVsbCwKICAgICAgICAgICAgICAgICAgICBsb2FkZWQgOiByZXNwLmxvYWRlZCB8fCBldmVudC5sb2FkZWQgfHwgbnVsbCwKICAgICAgICAgICAgICAgICAgICByZWFkeVN0YXRlIDogcmVzcC5yZWFkeVN0YXRlLAogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyA6IHJlc3AucmVzcG9uc2VIZWFkZXJzIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICggdHlwZW9mIHJlc3AuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzID09PSAnZnVuY3Rpb24nID8gcmVzcC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSA6IG51bGwpIHx8ICcnLAogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dCA6IHJlc3AucmVzcG9uc2VUZXh0LAogICAgICAgICAgICAgICAgICAgIHN0YXR1cyA6IHJlc3Auc3RhdHVzLAogICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgOiByZXNwLnN0YXR1c1RleHQsCiAgICAgICAgICAgICAgICAgICAgdG90YWwgOiByZXNwLnRvdGFsIHx8IGV2ZW50LnRvdGFsIHx8IG51bGwsCiAgICAgICAgICAgICAgICAgICAgdXJsIDogcmVzcC5maW5hbFVybCB8fCByZXEudXJsLAogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyBhbGxvdyBuZXcgcmVxdWVzdHMgdG8gYmUgcnVuIGlmIG91ciByZXF1ZXN0IGlzIGRvbmUKICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnb25lcnJvcicgfHwgdHlwZSA9PT0gJ29ubG9hZCcpIHsKICAgICAgICAgICAgICAgICAgICB4aHJJblByb2dyZXNzID0gZmFsc2U7CgogICAgICAgICAgICAgICAgICAgIC8vIHJ1biB0aGUgbmV4dCBpbiBxdWV1ZSwgaWYgYW55CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoeGhyLCByZXEuZGVsYXkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHJ1biB0aGUgY2FsbGJhY2sKICAgICAgICAgICAgICAgIGNvbnRleHQgPSByZXEuY29udGV4dCB8fCBuZXdSZXNwOwogICAgICAgICAgICAgICAgcmVxW3R5cGVdLmNhbGwoY29udGV4dCwgbmV3UmVzcCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggcmVxICYmICh4aHJJblByb2dyZXNzID09PSBmYWxzZSB8fCByZXEuYXN5bmMgPT09IHRydWUpICYmIHF1ZXVlLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgLy8gbWFrZSBpdCBzbyBubyBvdGhlciByZXF1ZXN0cyBnZXQgcnVuIHdoaWxlIHdlCiAgICAgICAgICAgIC8vIHJ1biB0aGlzIG9uZSwgaWYgYXN5bmMgaXNuJ3QgZW5hYmxlZAogICAgICAgICAgICB4aHJJblByb2dyZXNzID0gdHJ1ZTsKCiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgcXVldWUgaWYgaXQgaXMgZ29pbmcgdG8gYmUgcnVuCiAgICAgICAgICAgIHF1ZXVlLnNoaWZ0KCk7CgogICAgICAgICAgICBpZiAodHlwZW9mIEdNX3htbGh0dHBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICBpZiAocmVxLm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSAnR0VUJyAmJiByZXEuZGF0YSAhPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICByZXEudXJsICs9ICc/JyArIHJlcS5kYXRhOwogICAgICAgICAgICAgICAgICAgIHJlcS5kYXRhID0gJyc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICdkYXRhJyA6IHJlcS5kYXRhLAogICAgICAgICAgICAgICAgICAgICdoZWFkZXJzJyA6IHJlcS5oZWFkZXJzLAogICAgICAgICAgICAgICAgICAgICdtZXRob2QnIDogcmVxLm1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAnb25lcnJvcicgOiBmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVFdmVudHMoJ29uZXJyb3InLCByZXNwKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICdvbmxvYWQnIDogZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXZlbnRzKCdvbmxvYWQnLCByZXNwKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICdvbnJlYWR5c3RhdGVjaGFuZ2UnIDogZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXZlbnRzKCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCByZXNwKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICdvbnByb2dyZXNzJyA6IGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUV2ZW50cygnb25wcm9ncmVzcycsIHJlc3ApOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgJ3VybCcgOiByZXEudXJsLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBBY3RpdmVYT2JqZWN0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICB4aHJPYmogPSBYTUxIdHRwUmVxdWVzdCA/IG5ldyBYTUxIdHRwUmVxdWVzdCgpIDogbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7CgogICAgICAgICAgICAgICAgLy8gc2V0IGV2ZW50cwogICAgICAgICAgICAgICAgeGhyT2JqLm9ubG9hZCA9IGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXZlbnRzKCdvbmxvYWQnLCB4aHJPYmopOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHhock9iai5vbmVycm9yID0gZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVFdmVudHMoJ29uZXJyb3InLCB4aHJPYmopOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHhock9iai5vbnByb2dyZXNzID0gZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVFdmVudHMoJ29ucHJvZ3Jlc3MnLCB4aHJPYmosIHJlc3ApOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBpZiAocmVxLm1pbWVUeXBlICE9PSAnJykgewogICAgICAgICAgICAgICAgICAgIHhock9iai5vdmVycmlkZU1pbWVUeXBlKHJlcS5taW1lVHlwZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gYWRkIGhlYWRlcnMKICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHJlcS5oZWFkZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgeGhyT2JqLnNldFJlcXVlc3RIZWFkZXIoIGtleSwgcmVxLmhlYWRlcnNba2V5XSApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHhock9iai5vcGVuKHJlcS5tZXRob2QsIHJlcS51cmwsIHRydWUpOwogICAgICAgICAgICAgICAgeGhyT2JqLnNlbmQoIChyZXEuZGF0YSB8fCBudWxsKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGluaXQodXJsLCBzZXR0aW5ncykgewogICAgICAgIHZhciB1cmxzID0gW10sCiAgICAgICAgICAgIHJlYWxTZXR0aW5ncyA9IHsgLy8gZGVmYXVsdHMKICAgICAgICAgICAgICAgIGFzeW5jIDogZmFsc2UsCiAgICAgICAgICAgICAgICBkYXRhIDogJycsCiAgICAgICAgICAgICAgICBoZWFkZXJzIDoge30sCiAgICAgICAgICAgICAgICBtZXRob2QgOiAnR0VUJywKICAgICAgICAgICAgICAgIG1pbWVUeXBlIDogJycsCiAgICAgICAgICAgICAgICBvbmxvYWQgOiBibGFuaywKICAgICAgICAgICAgICAgIG9uZXJyb3IgOiBibGFuaywKICAgICAgICAgICAgICAgIG9ucHJvZ3Jlc3MgOiBibGFuaywKICAgICAgICAgICAgICAgIG9ucmVhZHlzdGF0ZWNoYW5nZSA6IGJsYW5rLAogICAgICAgICAgICAgICAgZGVsYXkgOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtleSwgdmFsdWU7CgogICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykgewogICAgICAgICAgICB1cmxzLnB1c2godXJsKTsKICAgICAgICB9IGVsc2UgaWYgKEpTTC50eXBlT2YodXJsKSA9PT0gJ2FycmF5JykgewogICAgICAgICAgICB1cmxzID0gdXJscy5jb25jYXQodXJsKTsKICAgICAgICB9CgogICAgICAgIGlmIChKU0wudHlwZU9mKHNldHRpbmdzKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgZm9yIChrZXkgaW4gc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gc2V0dGluZ3Nba2V5XTsKCiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FzeW5jJzogewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxTZXR0aW5nc1trZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnRleHQnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsU2V0dGluZ3Nba2V5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXRhJzogewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbFNldHRpbmdzW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChKU0wudHlwZU9mKHZhbHVlKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxTZXR0aW5nc1trZXldID0gdG9EYXRhU3RyaW5nKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGVsYXknOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbFNldHRpbmdzW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhZGVycyc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEpTTC50eXBlT2YodmFsdWUpID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbFNldHRpbmdzW2tleV0gPSB0b0RhdGFTdHJpbmcodmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXNlICdtZXRob2QnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvZ2V0fHBvc3R8aGVhZC9pLnRlc3QodmFsdWUpICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbFNldHRpbmdzW2tleV0gPSB2YWx1ZS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW1lVHlwZSc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxTZXR0aW5nc1trZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ29ubG9hZCc6IGNhc2UgJ29uZXJyb3InOiBjYXNlICdvbnJlYWR5c3RhdGVjaGFuZ2UnOiBjYXNlICdvbnByb2dyZXNzJzogewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsU2V0dGluZ3Nba2V5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gYWRkIGFuIG9iamVjdCB0byB0aGUgcXVldWUgZm9yIGVhY2ggdXJsCiAgICAgICAgaWYgKHVybHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBKU0wuZWFjaCh1cmxzLCBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICB2YXIgbmV3TyA9IGNvcHlPYmplY3QocmVhbFNldHRpbmdzKTsKICAgICAgICAgICAgICAgIG5ld08udXJsID0gdXJsOwogICAgICAgICAgICAgICAgcXVldWUucHVzaChuZXdPKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBlbmFibGUgYWpheCBpZiBpdCB3YXMgY2xlYXJlZCBlYXJsaWVyCiAgICAgICAgICAgIHhockNsZWFyZWQgPSBmYWxzZTsKCiAgICAgICAgICAgIC8vIHJ1biB0aGUgeGhyIGZ1bmN0aW9uCiAgICAgICAgICAgIC8vIGl0IHdpbGwgZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGEgcmVxdWVzdCBuZWVkcyB0byBiZSBzZW50CiAgICAgICAgICAgIHhocigpOwogICAgICAgIH0KICAgIH0KCiAgICBpbml0LnByb3RvdHlwZSA9IHsKICAgICAgICBjb25zdHJ1Y3RvcjogaW5pdCwKCiAgICAgICAgY2xlYXIgOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcXVldWUubGVuZ3RoID0gMDsKICAgICAgICAgICAgeGhySW5Qcm9ncmVzcyA9IGZhbHNlOwogICAgICAgICAgICB4aHJDbGVhcmVkID0gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICBnZXQgbGVuZ3RoKCkgewogICAgICAgICAgICByZXR1cm4gcXVldWUubGVuZ3RoOwogICAgICAgIH0KICAgIH07CgogICAgSlNMLmV4dGVuZCh7CiAgICAgICAgYWpheCA6IGZ1bmN0aW9uICh1cmwsIHNldHRpbmdzKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgaW5pdCh1cmwsIHNldHRpbmdzKTsKICAgICAgICB9LAogICAgICAgIGFqYXhDbGVhciA6IGluaXQucHJvdG90eXBlLmNsZWFyCiAgICB9KTsKCn0oKSk7"}]},{"name":"SnowLord7's Quizlet Exploit","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["quizlet.com","*://quizlet.com","*://*.quizlet.com","*://quizlet.com/*/learn","*://quizlet.com/*/spell","*://quizlet.com/*/match","*://quizlet.com/*/write","*://quizlet.com/*/micromatch","*://quizlet.com/*/test","*://quizlet.com/*/flashcards","*://quizlet.com/*/gravity","*://quizlet.com/live"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685023838412,"data":{}},"enabled":true,"position":15,"file_url":"https://greasyfork.org/scripts/393970-snowlord7-s-quizlet-exploit/code/SnowLord7's%20Quizlet%20Exploit.user.js","uuid":"0436c074-8a0f-4cd2-a9f7-aa890cc279b4","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIFNub3dMb3JkNydzIFF1aXpsZXQgRXhwbG9pdAovLyBAZGVzY3JpcHRpb24gICAgV29ya3Mgb24gYW55IFF1aXpsZXQgZ2FtZW1vZGUKLy8gQGF1dGhvciAgICAgICAgIERyZXdTbm93Ci8vIEBtYXRjaCAgICAgICAgICBxdWl6bGV0LmNvbQovLyBAbWF0Y2ggICAgICAgICAgKjovL3F1aXpsZXQuY29tCi8vIEBtYXRjaCAgICAgICAgICAqOi8vKi5xdWl6bGV0LmNvbQovLyBAbWF0Y2ggICAgICAgICAgKjovL3F1aXpsZXQuY29tLyovbGVhcm4KLy8gQG1hdGNoICAgICAgICAgICo6Ly9xdWl6bGV0LmNvbS8qL3NwZWxsCi8vIEBtYXRjaCAgICAgICAgICAqOi8vcXVpemxldC5jb20vKi9tYXRjaAovLyBAbWF0Y2ggICAgICAgICAgKjovL3F1aXpsZXQuY29tLyovd3JpdGUKLy8gQG1hdGNoICAgICAgICAgICo6Ly9xdWl6bGV0LmNvbS8qL21pY3JvbWF0Y2gKLy8gQG1hdGNoICAgICAgICAgICo6Ly9xdWl6bGV0LmNvbS8qL3Rlc3QKLy8gQG1hdGNoICAgICAgICAgICo6Ly9xdWl6bGV0LmNvbS8qL2ZsYXNoY2FyZHMKLy8gQG1hdGNoICAgICAgICAgICo6Ly9xdWl6bGV0LmNvbS8qL2dyYXZpdHkKLy8gQG1hdGNoICAgICAgICAgICo6Ly9xdWl6bGV0LmNvbS9saXZlCi8vIEB2ZXJzaW9uICAgICAgICAxLjAuNgovLyBAbmFtZXNwYWNlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9lbi9zY3JpcHRzLzM5Mzk3MC1zbm93bG9yZDctcy1xdWl6bGV0LWV4cGxvaXQvY29kZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgIGxldCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBlbGVtLnN0eWxlID0gYGNvbG9yOiAjMjVlMDAwOyBwb3NpdGlvbjogZml4ZWQ7IHotaW5kZXg6IDIxNDc0ODM2NDc7IHJpZ2h0OiAwOyBib3R0b206IDA7IHBhZGRpbmc6IDVweDsgY3Vyc29yOiBwb2ludGVyO2A7CiAgICBlbGVtLnRleHRDb250ZW50ID0gJ0luamVjdCc7CgogICAgZWxlbS5vbmNsaWNrID0gKCkgPT4gewogICAgICAgIGxldCB4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgeC5zcmMgPSAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1Nub3dMb3JkNy9xdWl6bGV0QG1hc3Rlci9pbmRleC5qcyc7CiAgICAgICAgeC5vbmxvYWQgPSAoKSA9PiB7IHgucmVtb3ZlKCkgfTsKICAgICAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKHgpOwoKICAgICAgICBlbGVtLnJlbW92ZSgpOwogICAgfQogICAgKGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hcHBlbmRDaGlsZChlbGVtKTsKfSkoKTs="},{"name":"Quizlet gravity game cheat","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://quizlet.com/*/gravity"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685023916572,"data":{}},"enabled":true,"position":16,"file_url":"https://greasyfork.org/scripts/22815-quizlet-gravity-game-cheat/code/Quizlet%20gravity%20game%20cheat.user.js","uuid":"1b53c0a7-c6eb-482a-a2d0-c06a2202f3ac","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBRdWl6bGV0IGdyYXZpdHkgZ2FtZSBjaGVhdAovLyBAbmFtZXNwYWNlICAgIERhbmllbHYxMjMKLy8gQHZlcnNpb24gICAgICAyLjQKLy8gQGRlc2NyaXB0aW9uICBUaGUgY29ycmVjdCBhbnN3ZXIgcG9wcyB1cCBpbiB0aGUgYnJvd3NlciBjb25zb2xlIGFuZCB0aGUgcmVzdGFydCBidXR0b24gZG93biBsZWZ0Ci8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9xdWl6bGV0LmNvbS8qL2dyYXZpdHkKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gU2V0IHNldHRpbmdzIGFuZCBzdHVmZgppZighbG9jYWxTdG9yYWdlLmNoZWF0KXsKICAgIGxvY2FsU3RvcmFnZS5jaGVhdEF1dG9UeXBlID0gZmFsc2U7CiAgICBsb2NhbFN0b3JhZ2UuY2hlYXRBY3RpdmF0ZWQgPSAgdHJ1ZTsKfQoKLy8gc2VsZWN0b3JzLCBpZiBzb21ldGhpbmcgYnJlYWtzIHRoZXNlIHByb2JhYmx5IG5lZWRzIHVwZGF0aW5nCi8vIGdldCB3b3JkIGZyb20gYXN0ZXJvaWQKLy8gYnJva2VuIDE5LjA5LjE3IHNlbGVjdG9yID0gIiNHcmF2aXR5R2FtZVRhcmdldCA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdi5Nb2RlTGF5b3V0LWNvbnRlbnQgPiBkaXYgPiBkaXYuR3Jhdml0eUdhbWVwbGF5Vmlldy1pbm5lciA+IGRpdjpudGgtY2hpbGQoNSkgPiBkaXYgPiBkaXYgPiBkaXYgPiAuVGVybVRleHQgPiAuVGVybVRleHQiOwpzZWxlY3RvciA9ICJkaXYgPiBkaXYgPiBkaXYgPiAuVGVybVRleHQgPiAuVGVybVRleHQiOwoKLy8gb3V0cHV0U2VsZWN0b3IgPSAiI0dyYXZpdHlHYW1lVGFyZ2V0ID4gZGl2ID4gZGl2ID4gZGl2ID4gZGl2Lk1vZGVMYXlvdXQtY29udHJvbHMgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXYuTW9kZUNvbnRyb2xzLW1haW4gPiBkaXYuTW9kZUNvbnRyb2xzLWFjdGlvbnMgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2ID4gYnV0dG9uID4gc3BhbiI7Cm91dHB1dFNlbGVjdG9yID0gIiNHcmF2aXR5TW9kZVRhcmdldCA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdi5Nb2RlTGF5b3V0LWNvbnRyb2xzID4gZGl2ID4gZGl2ID4gZGl2ID4gZGl2Lk1vZGVDb250cm9scy1tYWluID4gZGl2Lk1vZGVDb250cm9scy1hY3Rpb25zID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdiA+IGJ1dHRvbiA+IHNwYW4iOwoKaW5wdXRTZWxlY3RvciA9ICIjR3Jhdml0eUdhbWVUYXJnZXQgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXYuTW9kZUxheW91dC1jb250ZW50ID4gZGl2ID4gZGl2LkdyYXZpdHlHYW1lcGxheVZpZXctaW5uZXIgPiBkaXYuR3Jhdml0eUdhbWVwbGF5Vmlldy10eXBpbmdQcm9tcHQgPiBzcGFuID4gZGl2ID4gZGl2ID4gZGl2LkdyYXZpdHlUeXBpbmdQcm9tcHQtaW5wdXRXcmFwcGVyID4gdGV4dGFyZWEiOwoKaW5wdXRSZXBlYXRTZWxlY3RvciA9ICIjR3Jhdml0eUdhbWVUYXJnZXQgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXYuTW9kZUxheW91dC1jb250ZW50ID4gZGl2ID4gZGl2LkdyYXZpdHlHYW1lcGxheVZpZXctaW5uZXIgPiBkaXY6bnRoLWNoaWxkKDMpID4gZGl2ID4gZGl2ID4gZGl2ID4gZGl2LkdyYXZpdHlDb3B5VGVybVZpZXctaW5wdXRXcmFwcGVyID4gdGV4dGFyZWEiOwoKc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICAvLyBjb25zb2xlLmxvZyh3b3Jkcyk7CiAgICBpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSAmJiBsb2NhbFN0b3JhZ2UuY2hlYXRBY3RpdmF0ZWQgPT0gInRydWUiKXsKICAgICAgICB0cmFuc2xhdGVkV29yZCA9IHdvcmRzW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLmlubmVySFRNTC5yZXBsYWNlKFJlZ0V4cCgKICAgICAgICAgICAgJzwhLS1bXFxzXFxTXSo/KD86LS0+KT8nCiAgICAgICAgICAgICsgJzwhLS0tKz4/JyAgLy8gQSBjb21tZW50IHdpdGggbm8gYm9keQogICAgICAgICAgICArICd8PCEoPyFbZERdW29PXVtjQ11bdFRdW3lZXVtwUF1bZUVdfFxcW0NEQVRBXFxbKVtePl0qPj8nCiAgICAgICAgICAgICsgJ3w8Wz9dW14+XSo+PycsICAvLyBBIHBzZXVkby1jb21tZW50CiAgICAgICAgICAgICdnJyksICIiKV07CiAgICAgICAgY29uc29sZS5sb2codHJhbnNsYXRlZFdvcmQpOwogICAgICAgIC8vIHVwZGF0ZSB0aGUgZmVlZGJhY2sgYnV0dG9uIHdpdGggb25lIG9mIG91ciB0cmFuc2xhdGVkIHdvcmRzCiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvdXRwdXRTZWxlY3RvcikuaW5uZXJIVE1MID0gdHJhbnNsYXRlZFdvcmQ7CiAgICAgICAgaWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpbnB1dFNlbGVjdG9yKS52YWx1ZSA9PSAiIiAmJiBsb2NhbFN0b3JhZ2UuY2hlYXRBdXRvVHlwZSA9PSAidHJ1ZSIpewogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlucHV0U2VsZWN0b3IpLnZhbHVlID0gdHJhbnNsYXRlZFdvcmQ7CiAgICAgICAgfQogICAgfQp9LCAxMDApOwoKLy8gUXVpemxldC5ncmF2aXR5TW9kZURhdGEudGVybXNbMF0uZGVmaW5pdGlvbiBnZXRzIGRhdGEgc3RyYWlnaHQgZnJvbSBxdWl6bGV0IDozCndvcmRzID0ge307CmZvcihpID0gMDsgaTxRdWl6bGV0LmdyYXZpdHlNb2RlRGF0YS50ZXJtcy5sZW5ndGg7IGkrKyl7CiAgICB3b3Jkc1tRdWl6bGV0LmdyYXZpdHlNb2RlRGF0YS50ZXJtc1tpXS53b3JkXSA9IFF1aXpsZXQuZ3Jhdml0eU1vZGVEYXRhLnRlcm1zW2ldLmRlZmluaXRpb247Cn0K"},{"name":"The Original Quizlet Breaker","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://quizlet.com/*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685024777624,"data":{}},"enabled":true,"position":17,"file_url":"https://greasyfork.org/scripts/396071-the-original-quizlet-breaker/code/The%20Original%20Quizlet%20Breaker.user.js","uuid":"770a7794-478c-4f6a-980a-52e248c0e969","source":""},{"name":"Auto Typer for Nitro Type","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.nitrotype.com/race","https://www.nitrotype.com/race/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685032044258,"data":{}},"enabled":true,"position":18,"file_url":"https://greasyfork.org/scripts/454996-auto-typer-for-nitro-type/code/Auto%20Typer%20for%20Nitro%20Type.user.js","uuid":"d553abad-2fa6-40ce-b8b0-ad161ab2b8ac","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgQXV0byBUeXBlciBmb3IgTml0cm8gVHlwZQovLyBAbWF0Y2ggICAgICAgICAgICBodHRwczovL3d3dy5uaXRyb3R5cGUuY29tL3JhY2UKLy8gQG1hdGNoICAgICAgICAgICAgaHR0cHM6Ly93d3cubml0cm90eXBlLmNvbS9yYWNlLyoKLy8gQGF1dGhvciAgICAgICAgICAgU2luZyBEZXZlbG9wbWVudHMKLy8gQGdyYW50ICAgICAgICAgICAgbm9uZQovLyBAZGVzY3JpcHRpb24gICAgICBBdXRvIFR5cGVyIGZvciBOaXRybyBUeXBlIGJ5IFNpbmcgRGV2ZWxvcG1lbnRzLiBFbmpveSEKLy8gQGxpY2Vuc2UgTUlUCi8vIEB2ZXJzaW9uICAgICAgICAgIDMKLy8gQG5hbWVzcGFjZSBodHRwczovL3NpbmdkZXZlbG9wbWVudHNibG9nLndvcmRwcmVzcy5jb20vP3A9NDM1NAovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vc2luZ2RldmVsb3BtZW50c2Jsb2cuZmlsZXMud29yZHByZXNzLmNvbS8yMDIyLzExL25pdHJvdHlwZS1sb2dvLmpwZwovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKJ3VzZSBzdHJpY3QnOwpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnN0cnVjdHVyZS0tbml0cm90eXBlIC5yYWNlLWhvc3QtY29udHJvbHMgLmJ0bicpWzJdLmNsaWNrKCl9LDE1MDApOwoKY29uc3QgZmluZFJlYWN0ID0gKGRvbSwgdHJhdmVyc2VVcCA9IDApID0+IHsKY29uc3Qga2V5ID0gT2JqZWN0LmtleXMoZG9tKS5maW5kKChrZXkpID0+IGtleS5zdGFydHNXaXRoKCJfX3JlYWN0RmliZXIkIikpCmNvbnN0IGRvbUZpYmVyID0gZG9tW2tleV0KaWYgKGRvbUZpYmVyID09IG51bGwpIHJldHVybiBudWxsCmNvbnN0IGdldENvbXBGaWJlciA9IChmaWJlcikgPT4gewpsZXQgcGFyZW50RmliZXIgPSBmaWJlcj8ucmV0dXJuCndoaWxlICh0eXBlb2YgcGFyZW50RmliZXI/LnR5cGUgPT0gInN0cmluZyIpIHsKcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlcj8ucmV0dXJuCn0KcmV0dXJuIHBhcmVudEZpYmVyCn0KbGV0IGNvbXBGaWJlciA9IGdldENvbXBGaWJlcihkb21GaWJlcikKZm9yIChsZXQgaSA9IDA7IGkgPiB0cmF2ZXJzZVVwICYmIGNvbXBGaWJlcjsgaSsrKSB7CmNvbXBGaWJlciA9IGdldENvbXBGaWJlcihjb21wRmliZXIpCn0KcmV0dXJuIGNvbXBGaWJlcj8uc3RhdGVOb2RlCn0KdmFyIHRva2VuID0gMAp2YXIgdCA9IDAKCgpzZXRJbnRlcnZhbChmdW5jdGlvbigpe2ZpbmRSZWFjdChyYWNlQ29udGFpbmVyKVsndHlwZWRTdGF0cyddWyd0eXBlZCddPTEwMDAwMDAwMDAwMDAwfSwxMDAwKTsKfSkoKTs="},{"name":"Better Google","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://www.google.*","http://www.google.*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685466126666,"data":{}},"enabled":true,"position":19,"file_url":"https://greasyfork.org/scripts/12182-better-google/code/Better%20Google.user.js","uuid":"b7a2a4e8-0982-4266-909f-1a5d2f85da67","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEJldHRlciBHb29nbGUKLy8gQG5hbWVzcGFjZSAgIGZlaWZlaWhhbmcuaW5mbwovLyBAZGVzY3JpcHRpb24gQWRkICdxdWljayBzZWFyY2gnIGlucHV0IGFuZCAnZ28gdG8gdG9wJyBidXR0b24gZm9yIEdvb2dsZS4gQWxzbyBoaWdobGlnaHQgc2VhcmNoIHRlcm1zLgovLyBAaW5jbHVkZSAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLioKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly93d3cuZ29vZ2xlLioKLy8gQHZlcnNpb24gICAgIDUuMS4zCi8vIEBncmFudCAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kCi8vID09L1VzZXJTY3JpcHQ9PQp2YXIgc2hvdWxkSGlnaGxpZ2h0ID0gdHJ1ZTsKdmFyIENPTE9SUyA9IFsKICAnI0ZGRkYwMCcsCiAgJyNDQ0NDRkYnLAogICcjMDBDQ0ZGJywKICAnIzMzQ0NDQycsCiAgJyNGRjgwODAnLAogICcjRkZDQzAwJywKICAnIzAwODAwMCcsCiAgJyNGRkZGOTknLAogICcjODA4MDAwJywKICAnI0ZGRkZDQycKXTsKLy8gaGlnaGxpZ2h0IHNlYXJjaCB0ZXJtcy4KdmFyIHVybEJ1ZmZlciwKcmVzdWx0QnVmZmVyOwpmdW5jdGlvbiBoaWdobGlnaHQoKSB7CiAgY29uc29sZS5sb2coJzEnKTsKICAvLyBmaXJzdCwgZmluZCBhbGwgJ2VtJ3MuCiAgdmFyIGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2VtJyk7CiAgLy8gaWYgdGhlcmUgaXMgbm8gJ2VtJ3MsIGRvIG5vdGhpbmcuCiAgaWYgKGVtcy5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgLy8gY29udmVydCBlbXMgaW50byBhbiBhcnJheS4KCiAgZW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGVtcyk7CiAgdmFyIGNvdW50ZXIgPSAwOwogIHZhciBzdHlsZXMgPSB7CiAgfTsKICAvLyBpdGVyYXRlIHRocm91Z2ggYWxsIHRoZSBrZXl3b3JkcyBpbiBzZWFyY2ggcmVzdWx0LCAKICAvLyBhbmQgbWFwIHRoZSBwcmVkZWZpbmVkIGNvbG9yIHRvIHRoZW0uCiAgZW1zLmZvckVhY2goZnVuY3Rpb24gKGVtKSB7CiAgICB2YXIgdGV4dCA9IGVtLnRleHRDb250ZW50LnRvVXBwZXJDYXNlKCkudHJpbSgpOwogICAgdmFyIGJnID0gc3R5bGVzW3RleHRdOwogICAgaWYgKCFiZykgewogICAgICBiZyA9IHN0eWxlc1t0ZXh0XSA9IENPTE9SU1tjb3VudGVyKytdOwogICAgICBpZiAoY291bnRlciA9PT0gQ09MT1JTLmxlbmd0aCkgewogICAgICAgIGNvdW50ZXIgPSAwOwogICAgICB9CiAgICB9CiAgICBlbS5zdHlsZS5iYWNrZ3JvdW5kID0gYmc7CiAgICBlbS5zdHlsZS5jb2xvciA9ICcjMDAwJzsKICAgIGVtLnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7CiAgfSk7Cn0KZnVuY3Rpb24gdG9nZ2xlSGlnaGxpZ2h0KCkgewogIGlmICghc2hvdWxkSGlnaGxpZ2h0KSB7CiAgICBzaG91bGRIaWdobGlnaHQgPSB0cnVlOwogICAgaGlnaGxpZ2h0KCk7CiAgfSAKICBlbHNlIHsKICAgIHNob3VsZEhpZ2hsaWdodCA9IGZhbHNlOwogICAgdmFyIGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2VtJyk7CiAgICBpZiAoZW1zLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBlbXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoZW1zKTsKICAgIGVtcy5tYXAoZnVuY3Rpb24gKGVtKSB7CiAgICAgIGVtLnN0eWxlLmJhY2tncm91bmQgPSAnI2ZmZic7CiAgICB9KTsKICB9Cn0KR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgnVG9nZ2xlIEhpZ2hsaWdodCcsIHRvZ2dsZUhpZ2hsaWdodCk7CnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAvLyBpZiBpdCdzIG5vdCBnb29nbGUncyBsYW5kaW5nIHBhZ2UuCiAgaWYgKHVybEJ1ZmZlciAhPT0gd2luZG93LmxvY2F0aW9uLmhyZWYgJiYKICAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hwbG9nbycpKSB7CiAgICB2YXIgcmVzdWx0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaCcpOwogICAgaWYgKHJlc3VsdENvbnRhaW5lciAmJiByZXN1bHRDb250YWluZXIudGV4dENvbnRlbnQgIT09IHJlc3VsdEJ1ZmZlcikgewogICAgICAvLyB1cGRhdGUgYnVmZmVyLgogICAgICByZXN1bHRCdWZmZXIgPSByZXN1bHRDb250YWluZXIudGV4dENvbnRlbnQ7CiAgICAgIGlmICghc2hvdWxkSGlnaGxpZ2h0KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIC8vIGZpcnN0LCBmaW5kIGFsbCAnZW0ncy4KCiAgICAgIHZhciBlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdlbScpOwogICAgICAvLyBpZiB0aGVyZSBpcyBubyAnZW0ncywgZG8gbm90aGluZy4KICAgICAgaWYgKGVtcy5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgLy8gY29udmVydCBlbXMgaW50byBhbiBhcnJheS4KCiAgICAgIGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShlbXMpOwogICAgICB2YXIgY291bnRlciA9IDA7CiAgICAgIHZhciBzdHlsZXMgPSB7CiAgICAgIH07CiAgICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIGtleXdvcmRzIGluIHNlYXJjaCByZXN1bHQsIAogICAgICAvLyBhbmQgbWFwIHRoZSBwcmVkZWZpbmVkIGNvbG9yIHRvIHRoZW0uCiAgICAgIGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbSkgewogICAgICAgIHZhciB0ZXh0ID0gZW0udGV4dENvbnRlbnQudG9VcHBlckNhc2UoKS50cmltKCk7CiAgICAgICAgdmFyIGJnID0gc3R5bGVzW3RleHRdOwogICAgICAgIGlmICghYmcpIHsKICAgICAgICAgIGJnID0gc3R5bGVzW3RleHRdID0gQ09MT1JTW2NvdW50ZXIrK107CiAgICAgICAgICBpZiAoY291bnRlciA9PT0gQ09MT1JTLmxlbmd0aCkgewogICAgICAgICAgICBjb3VudGVyID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZW0uc3R5bGUuYmFja2dyb3VuZCA9IGJnOwogICAgICAgIGVtLnN0eWxlLmNvbG9yID0gJyMwMDAnOwogICAgICAgIGVtLnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7CiAgICAgIH0pOwogICAgICB1cmxCdWZmZXIgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgIH0KICB9Cn0sIDIwMCk7CnZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKY29udGFpbmVyLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7IHBvc2l0aW9uOiBmaXhlZDsgYm90dG9tOiAyMHB4OycgKwoncmlnaHQ6IDVweDsgdGV4dC1hbGlnbjogcmlnaHQ7JyArCid3aWR0aDogMjgwcHg7IGhlaWdodDogNjBweDsgei1pbmRleDogOTk5OTk5OTk5OycgKwonb3BhY2l0eTogMC44Oyc7CmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkgewogIHRoaXMuc3R5bGUub3BhY2l0eSA9ICcxJzsKfSwgdHJ1ZSk7CmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnN0eWxlLm9wYWNpdHkgPSAnMC44JzsKfSwgdHJ1ZSk7Ci8vIGNyZWF0ZSBxdWljayBxdWVyeSBpbnB1dC4KdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKaW5wdXQudHlsZSA9ICd0ZXh0JzsKaW5wdXQudmFsdWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbHN0LWliJykudmFsdWU7CmlucHV0LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCAnU2VhcmNoLi4uJyk7CmlucHV0LnN0eWxlID0gJ2JvcmRlcjogbm9uZTsgYm9yZGVyLWxlZnQ6IHNvbGlkICNFQTQzMzUgNXB4OyBmbGV4OiAxOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IG91dGxpbmU6IG5vbmU7IGhlaWdodDogNDBweDsnICsKJ2ZvbnQtc2l6ZTogMTVweDsgbWFyZ2luLXRvcDogMTBweDsgbWFyZ2luLWJvdHRvbTogMTBweDsgcGFkZGluZzogMDsgJyArCidwYWRkaW5nLWxlZnQ6IDEwcHg7IHBhZGRpbmctcmlnaHQ6IDEwcHg7IGJveC1zaGFkb3c6IDAgMXB4IDNweCAjOTk5OTk5Oyc7CmNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7Ci8vIGJpbmQga2V5cHJlc3MtZW50ZXIgZXZlbnQuCmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24gKGV2dCkgewogIGlmIChldnQua2V5Q29kZSA9PT0gMTMpIHsKICAgIHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlLnRyaW0oKSB8fCAnJzsKICAgIGlmICh2YWx1ZSAhPT0gJycpIHsKICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xzdC1pYicpLnZhbHVlID0gdmFsdWU7CiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sc2InKS5jbGljaygpOwogICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsc3QtaWInKS5mb2N1cygpOwogICAgfQogIH0KfSwgZmFsc2UpOwovLyBjcmVhdGUgdGhlIGdvdG8tdG9wIGJ1dHRvbi4KdmFyIGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwpidG4uaWQgPSAnZ290by10b3AtYnRuJzsKYnRuLmlubmVySFRNTCA9ICdUT1AnOwpidG4ub25jbGljayA9IGdvdG9Ub3A7Ci8vIHNldCBidXR0b24gQ1NTIHN0eWxlLgpidG4uc3R5bGUgPSAnZGlzcGxheTogaW5saW5lLWJsb2NrOyBwb3NpdGlvbjogcmVsYXRpdmU7IGxlZnQ6IC03cHg7IGNvbG9yOiAjZmZmOyBsaW5lLWhlaWdodDogNjBweDsgdGV4dC1hbGlnbjogY2VudGVyOycgKwond2lkdGg6IDYwcHg7IGhlaWdodDogNjBweDsgYmFja2dyb3VuZDogIzQyODVGNDsgYm94LXNoYWRvdzogMCAycHggM3B4ICM5OTk5OTk7JyArCidjdXJzb3I6IHBvaW50ZXI7IGZvbnQtd2VpZ2h0OiBib2xkZXI7IGJvcmRlci1yYWRpdXM6IDEwMCU7JzsKLy8gYXBwZW5kIHRoZSBnby10by10b3AgdG8gc2VhcmNoIGZvcm0gdG8gc3VjY2Vzc2Z1bGx5IGF0dGFjaCB0byB0aGUgVUkuCmNvbnRhaW5lci5hcHBlbmRDaGlsZChidG4pOwp2YXIgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hmb3JtJyk7CmZvcm0uYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogIHZhciB0b3AgPSAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvYy5zY3JvbGxUb3ApIC0gKGRvYy5jbGllbnRUb3AgfHwgMCk7CiAgaWYgKHRvcCAhPT0gMCkgewogICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7CiAgfQp9Ci8vIGJpbmQgYnV0dG9uIGhpZGVuL3Nob3cgZXZlbnQuCgp3aW5kb3cub25zY3JvbGwgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB2YXIgdG9wID0gKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2Muc2Nyb2xsVG9wKSAtIChkb2MuY2xpZW50VG9wIHx8IDApOwogIGlmICh0b3AgPT09IDApIHsKICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogIH0gZWxzZSB7CiAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4JzsKICB9Cn0KZnVuY3Rpb24gZ290b1RvcCgpIHsKICBnb3RvKE1hdGguZmxvb3Iod2luZG93LnBhZ2VZT2Zmc2V0IC8gNSkpOwp9CmZ1bmN0aW9uIGdvdG8oc3RlcCkgewogIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgd2luZG93LnNjcm9sbFRvKDAsIHdpbmRvdy5wYWdlWU9mZnNldCAtIHN0ZXApOwogICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA8PSAwKSByZXR1cm47CiAgICBnb3RvKHN0ZXApOwogIH0sIDEwMCk7Cn0K"},{"name":"mmmturkeybacon Numbered Google Results with Easy Copy","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://www.google.*/search?*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1685466179602,"data":{}},"enabled":true,"position":20,"file_url":"https://greasyfork.org/scripts/3108-mmmturkeybacon-numbered-google-results-with-easy-copy/code/mmmturkeybacon%20Numbered%20Google%20Results%20with%20Easy%20Copy.user.js","uuid":"e83f85b6-429b-4793-b599-49511b273278","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIG1tbXR1cmtleWJhY29uIE51bWJlcmVkIEdvb2dsZSBSZXN1bHRzIHdpdGggRWFzeSBDb3B5Ci8vIEB2ZXJzaW9uICAgICAxLjEzCi8vIEBkZXNjcmlwdGlvbiBOdW1iZXJzIHJlc3VsdHMgaW4gdGhlIGZvcm1hdCBNLk4gdG8gc2hvdyB0aGUgcmVzdWx0IG51bWJlci4gSWYgeW91IGFyZSBvbiB0aGUgZmlyc3QgcGFnZSBpdCBkaXZpZGVzIHRoZSByZXN1bHRzIHVwIGludG8gZ3JvdXBzIG9mIDEwIGFuZCBhZnRlciBldmVyeSAxMCByZXN1bHRzIE0gaXMgaW5jcmVhc2VkIGJ5IDEuIFRoaXMgYWxsb3dzIHlvdSB0byBxdWlja2x5IHNlZSB3aGljaCBwYWdlIGEgcmVzdWx0IHdvdWxkIGJlIG9uIGlmIHRoZXJlIHdlcmUgMTAgcmVzdWx0cyBwZXIgcGFnZS4gRm9yIGFueSBwYWdlIGFmdGVyIHRoZSBmaXJzdCwgTSBpcyB0aGUgcGFnZSBudW1iZXIgYW5kIE4gaXMgdGhlIHJlc3VsdCBudW1iZXIuIEhvbGQgdGhlIHBvaW50ZXIgb3ZlciBhIGJ1dHRvbiBmb3IgaW5zdHJ1Y3Rpb25zIG9uIGNvcHlpbmcuIERpc2FibGUgR29vZ2xlIEluc3RhbnQgKEdlYXI+U2VhcmNoIHNldHRpbmdzPk5ldmVyIHNob3cgSW5zdGFudCByZXN1bHRzKS4KLy8gQ2xpY2sgYnV0dG9uIHRvIGNvcHkgbGluayBVUkwsIEN0cmwtY2xpY2sgdG8gY29weSBsaW5rIHRpdGxlLCBTaGlmdC1jbGljayB0byBjb3B5IGxpbmsgdGl0bGUgYW5kIFVSTC4KLy8gQGF1dGhvciAgICAgIG1tbXR1cmtleWJhY29uCi8vIEBuYW1lc3BhY2UgICBodHRwOi8vdXNlcnNjcmlwdHMub3JnL3VzZXJzLzUyMzM2NwovLyBAaW5jbHVkZSAgICAgaHR0cCo6Ly93d3cuZ29vZ2xlLiovc2VhcmNoPyoKLy8gQHJlcXVpcmUgICAgIGh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzIuMS4zL2pxdWVyeS5taW4uanMKLy8gQGdyYW50ICAgICAgIEdNX3NldENsaXBib2FyZAovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIElmIHlvdSBoYXZlIEdvb2dsZSBzZXQgdG8gcmV0dXJuIDEwIHJlc3VsdHMgcGVyIHBhZ2UgKGRlZmF1bHQpLCB0aGUgZmlyc3QKLy8gcGFnZSB1c3VhbGx5IGhhcyAxMCByZXN1bHRzIGJ1dCBub3Qgc29tZXRpbWVzIGl0IHdpbGwgaGF2ZSBmZXdlci4KCi8vIElmIHlvdSBjaGFuZ2UgUmVzdWx0cyBwZXIgcGFnZSB1bmRlciBTZWFyY2ggU2V0dGluZ3MsIEdvb2dsZSB3aWxsIHJldHVybgovLyBtb3JlIHJlc3VsdHMgcGVyIHBhZ2UuIFRoZSBudW1iZXIgb2YgbGlua3Mgb24gdGhlIHBhZ2UgbWlnaHQgbm90IGFsd2F5cyBiZQovLyB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgcGVyIHBhZ2UgeW91IGNob3NlLiBUaGF0J3MgYmVjYXVzZSBHb29nbGUKLy8gZG9lc24ndCBjb3VudCBldmVyeSBsaW5rIGl0IHNob3dzIHlvdSBhcyBhIHJlc3VsdC4KLy8gQWRzIGFyZW4ndCBjb3VudGVkCi8vICJNb3JlIHJlc3VsdHMgZnJvbSAuLi4iIGFyZSBncm91cGVkIHdpdGggdGhlIGxpbmsgdGhleSBhcmUgdW5kZXIuIEdvb2dsZQovLyBjb3VudHMgdGhpcyBhcyBvbmUgcmVzdWx0LgovLyAiSW1hZ2VzIGZvciAuLi4iIGFyZW4ndCBjb3VudGVkLiAoaW1hZ2Vib3hfYmlnaW1hZ2VzKQovLyAiTmV3cyBmb3IgLi4uIiBhbmQgYWxsIHRoZSB0aGUgbGlua3MgZ3JvdXBlZCB3aXRoIGl0IGFyZSBjb3VudGVkIGFzIG9uZQovLyByZXN1bHQ/PyAobmV3c2JveCkKCi8vIHNjcm9sbCB0byBmaXJzdCByZXN1bHQgaWYgdGhlIGZvbGxvd2luZyBpcyB0cnVlIG9yIHRoZSBnb29nbGUgVVJMIGNvbnRhaW5zICZtdGJfc2Nyb2xsCnZhciBTQ1JPTExfVE9fRklSU1QgPSBmYWxzZTsKCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkKewogICAgLy8gSWYgaW5zdGFudCBzZWFyY2ggaGFzIGJlZW4gZW5hYmxlZAogICAgLy9pZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWlzc3BlbGwnKSkgcmV0dXJuOwoKICAgIHZhciAkcmVzdWx0c19kaXYgPSAkKCdkaXZbaWQ9InJlcyJdJyk7CiAgICBpZiAoJHJlc3VsdHNfZGl2Lmxlbmd0aCA9PSAwKQogICAgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gcmVzdWx0cy4iKTsKICAgIH0KCiAgICB2YXIgcmVzdWx0X251bSA9IDA7CiAgICB2YXIgcGFnZV9udW0gPSBOdW1iZXIoJCgndGRbY2xhc3M9ImN1ciJdJykudGV4dCgpKTsKICAgIHBhZ2VfbnVtID0gKHBhZ2VfbnVtID09IDApID8gMSA6IHBhZ2VfbnVtOwogICAgdmFyIHBhZ2Vfc3RyID0gcGFnZV9udW0gKyAnLic7CiAgICB2YXIgaXNfZmlyc3RfcGFnZSA9IChwYWdlX251bSA9PSAxKTsKCiAgICB2YXIgJHJlc3VsdHMgPSAkKCdsaVtjbGFzcz0iZyJdLGxpW2NsYXNzPSJnIHcwIl0nKS5ub3QoJ1tpZD0iaW1hZ2Vib3hfYmlnaW1hZ2VzIl0nKS5ub3QoJ1tpZD0ibmV3c2JveCJdJykuZmluZCgnaDMnKTsKICAgICRyZXN1bHRzLmVhY2goZnVuY3Rpb24oaSkKICAgIHsKICAgICAgICByZXN1bHRfbnVtKys7CiAgICAgICAgaWYgKHJlc3VsdF9udW0gPiAxMCAmJiBpc19maXJzdF9wYWdlKQogICAgICAgIHsKICAgICAgICAgICAgcGFnZV9udW0rKzsKICAgICAgICAgICAgcGFnZV9zdHIgPSBwYWdlX251bSArICcuJwogICAgICAgICAgICByZXN1bHRfbnVtID0gcmVzdWx0X251bSAtIDEwOwogICAgICAgIH0KCiAgICAgICAgJCh0aGlzKS5odG1sKCc8YnV0dG9uIHRpdGxlPSJDbGljayB0byBjb3B5IFVSTC5cbkN0cmwtY2xpY2sgdG8gY29weSB0aXRsZS5cblNoaWZ0LWNsaWNrIHRvIGNvcHkgdGl0bGUgYW5kIFVSTC4iIGlkPW10Yl9idG4nK3BhZ2Vfc3RyK3Jlc3VsdF9udW0rJz4nK3BhZ2Vfc3RyICsgcmVzdWx0X251bSsnPC9idXR0b24+JyArICcmbmJzcDsnICsgJCh0aGlzKS5odG1sKCkpOwogICAgICAgIHZhciAkYnV0dG9uID0gJCh0aGlzKS5maW5kKCdidXR0b25baWRePSJtdGJfYnRuIl0nKTsKICAgICAgICB2YXIgJGxpbmsgPSAkKHRoaXMpLmZpbmQoJ2EnKTsKCiAgICAgICAgdmFyIGJ1dHRvbl9oYW5kbGVyID0gKGZ1bmN0aW9uKHRpdGxlLCBVUkwpe3JldHVybiBmdW5jdGlvbihldmVudCkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBHTV9zZXRDbGlwYm9hcmQodGl0bGUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuc2hpZnRLZXkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIEdNX3NldENsaXBib2FyZCh0aXRsZSArJyAnKyBVUkwpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBHTV9zZXRDbGlwYm9hcmQoVVJMKQogICAgICAgICAgICB9CiAgICAgICAgfX0pKCRsaW5rLmh0bWwoKSwgJGxpbmsuYXR0cignaHJlZicpKTsKCiAgICAgICAgJGJ1dHRvbi5iaW5kKCdjbGljaycsIGJ1dHRvbl9oYW5kbGVyKTsKCiAgICB9KTsKCiAgICAvLyBzY3JvbGwgdG8gZmlyc3QgYnV0dG9uIHVubGVzcyBpbmZvIGJveCBpcyBwcmVzZW50CiAgICBpZiAoJCgnbGkuZy50cG8ua25hdmkub2Jjb250YWluZXInKS5sZW5ndGggPT0gMCAmJiAoU0NST0xMX1RPX0ZJUlNUID09IHRydWUgfHwgZG9jdW1lbnQubG9jYXRpb24uaHJlZi5pbmRleE9mKCcmbXRiX3Njcm9sbCcpID4gLTEpKQogICAgewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbltpZF49Im10Yl9idG4iXScpLnNjcm9sbEludG9WaWV3KCk7CiAgICB9Cn0pOw==","requires":[{"meta":{"name":"jquery.min.js","url":"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js","ts":1685466180035,"mimetype":"text/javascript"},"source":""}]}],"settings":{"enabled":true,"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":2},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":3},{"reasons":{"en":"Used for a phishing compain to compromise users of baon-nutrition.com"},"rules":["/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"],"severity":8}]}}